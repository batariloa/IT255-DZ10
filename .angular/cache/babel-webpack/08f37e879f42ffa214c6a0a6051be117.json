{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwitterApiv1 = void 0;\n\nconst globals_1 = require(\"../globals\");\n\nconst dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\n\nconst types_1 = require(\"../types\");\n\nconst client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\n\n\nclass TwitterApiv1 extends client_v1_write_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /**\n   * Get a client with read/write rights.\n   */\n\n\n  get readWrite() {\n    return this;\n  }\n  /* Direct messages */\n  // Part: Sending and receiving events\n\n  /**\n   * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n   */\n\n\n  sendDm({\n    recipient_id,\n    custom_profile_id,\n    ...params\n  }) {\n    const args = {\n      event: {\n        type: types_1.EDirectMessageEventTypeV1.Create,\n        [types_1.EDirectMessageEventTypeV1.Create]: {\n          target: {\n            recipient_id\n          },\n          message_data: params\n        }\n      }\n    };\n\n    if (custom_profile_id) {\n      args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n    }\n\n    return this.post('direct_messages/events/new.json', args, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a single Direct Message event by the given id.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n   */\n\n\n  getDmEvent(id) {\n    return this.get('direct_messages/events/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes the direct message specified in the required ID parameter.\n   * The authenticating user must be the recipient of the specified direct message.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n   */\n\n\n  deleteDm(id) {\n    return this.delete('direct_messages/events/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Returns all Direct Message events (both sent and received) within the last 30 days.\n   * Sorted in reverse-chronological order.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n   */\n\n\n  listDmEvents(args = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = { ...args\n      };\n      const initialRq = yield _this.get('direct_messages/events/list.json', queryParams, {\n        fullResponse: true\n      });\n      return new dm_paginator_v1_1.DmEventsV1Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this,\n        queryParams\n      });\n    })();\n  } // Part: Welcome messages (events)\n\n  /**\n   * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n   */\n\n\n  newWelcomeDm(name, data) {\n    const args = {\n      [types_1.EDirectMessageEventTypeV1.WelcomeCreate]: {\n        name,\n        message_data: data\n      }\n    };\n    return this.post('direct_messages/welcome_messages/new.json', args, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a Welcome Message by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n   */\n\n\n  getWelcomeDm(id) {\n    return this.get('direct_messages/welcome_messages/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes a Welcome Message by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n   */\n\n\n  deleteWelcomeDm(id) {\n    return this.delete('direct_messages/welcome_messages/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Updates a Welcome Message by the given ID.\n   * Updates to the welcome_message object are atomic.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n   */\n\n\n  updateWelcomeDm(id, data) {\n    const args = {\n      message_data: data\n    };\n    return this.put('direct_messages/welcome_messages/update.json', args, {\n      forceBodyMode: 'json',\n      query: {\n        id\n      }\n    });\n  }\n  /**\n   * Returns all Direct Message events (both sent and received) within the last 30 days.\n   * Sorted in reverse-chronological order.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n   */\n\n\n  listWelcomeDms(args = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = { ...args\n      };\n      const initialRq = yield _this2.get('direct_messages/welcome_messages/list.json', queryParams, {\n        fullResponse: true\n      });\n      return new dm_paginator_v1_1.WelcomeDmV1Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this2,\n        queryParams\n      });\n    })();\n  } // Part: Welcome message (rules)\n\n  /**\n   * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n   */\n\n\n  newWelcomeDmRule(welcomeMessageId) {\n    return this.post('direct_messages/welcome_messages/rules/new.json', {\n      welcome_message_rule: {\n        welcome_message_id: welcomeMessageId\n      }\n    }, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a Welcome Message Rule by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n   */\n\n\n  getWelcomeDmRule(id) {\n    return this.get('direct_messages/welcome_messages/rules/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes a Welcome Message Rule by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n   */\n\n\n  deleteWelcomeDmRule(id) {\n    return this.delete('direct_messages/welcome_messages/rules/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Retrieves all welcome DM rules for this account.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n   */\n\n\n  listWelcomeDmRules(args = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = { ...args\n      };\n      return _this3.get('direct_messages/welcome_messages/rules/list.json', queryParams);\n    })();\n  }\n  /**\n   * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n   * Test if a rule already exists, delete if any, then create a rule for current message ID.\n   *\n   * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n   */\n\n\n  setWelcomeDm(welcomeMessageId, deleteAssociatedWelcomeDmWhenDeletingRule = true) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const existingRules = yield _this4.listWelcomeDmRules();\n\n      if ((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const rule of existingRules.welcome_message_rules) {\n          yield _this4.deleteWelcomeDmRule(rule.id);\n\n          if (deleteAssociatedWelcomeDmWhenDeletingRule) {\n            yield _this4.deleteWelcomeDm(rule.welcome_message_id);\n          }\n        }\n      }\n\n      return _this4.newWelcomeDmRule(welcomeMessageId);\n    })();\n  } // Part: Read indicator\n\n  /**\n   * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n   */\n\n\n  markDmAsRead(lastEventId, recipientId) {\n    return this.post('direct_messages/mark_read.json', {\n      last_read_event_id: lastEventId,\n      recipient_id: recipientId\n    }, {\n      forceBodyMode: 'url'\n    });\n  }\n  /**\n   * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n   */\n\n\n  indicateDmTyping(recipientId) {\n    return this.post('direct_messages/indicate_typing.json', {\n      recipient_id: recipientId\n    }, {\n      forceBodyMode: 'url'\n    });\n  }\n\n}\n\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/v1/client.v1.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TwitterApiv1","globals_1","require","dm_paginator_v1_1","types_1","client_v1_write_1","default","constructor","arguments","_prefix","API_V1_1_PREFIX","readWrite","sendDm","recipient_id","custom_profile_id","params","args","event","type","EDirectMessageEventTypeV1","Create","target","message_data","post","forceBodyMode","getDmEvent","id","get","deleteDm","delete","listDmEvents","queryParams","initialRq","fullResponse","DmEventsV1Paginator","realData","data","rateLimit","instance","newWelcomeDm","name","WelcomeCreate","getWelcomeDm","deleteWelcomeDm","updateWelcomeDm","put","query","listWelcomeDms","WelcomeDmV1Paginator","newWelcomeDmRule","welcomeMessageId","welcome_message_rule","welcome_message_id","getWelcomeDmRule","deleteWelcomeDmRule","listWelcomeDmRules","setWelcomeDm","deleteAssociatedWelcomeDmWhenDeletingRule","_a","existingRules","welcome_message_rules","length","rule","markDmAsRead","lastEventId","recipientId","last_read_event_id","indicateDmTyping"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TwitterApiv1 = void 0;\nconst globals_1 = require(\"../globals\");\nconst dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\nconst types_1 = require(\"../types\");\nconst client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\nclass TwitterApiv1 extends client_v1_write_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with read/write rights.\n     */\n    get readWrite() {\n        return this;\n    }\n    /* Direct messages */\n    // Part: Sending and receiving events\n    /**\n     * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n     */\n    sendDm({ recipient_id, custom_profile_id, ...params }) {\n        const args = {\n            event: {\n                type: types_1.EDirectMessageEventTypeV1.Create,\n                [types_1.EDirectMessageEventTypeV1.Create]: {\n                    target: { recipient_id },\n                    message_data: params,\n                },\n            },\n        };\n        if (custom_profile_id) {\n            args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n        }\n        return this.post('direct_messages/events/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a single Direct Message event by the given id.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n     */\n    getDmEvent(id) {\n        return this.get('direct_messages/events/show.json', { id });\n    }\n    /**\n     * Deletes the direct message specified in the required ID parameter.\n     * The authenticating user must be the recipient of the specified direct message.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n     */\n    deleteDm(id) {\n        return this.delete('direct_messages/events/destroy.json', { id });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listDmEvents(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/events/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.DmEventsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome messages (events)\n    /**\n     * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n     */\n    newWelcomeDm(name, data) {\n        const args = {\n            [types_1.EDirectMessageEventTypeV1.WelcomeCreate]: {\n                name,\n                message_data: data,\n            },\n        };\n        return this.post('direct_messages/welcome_messages/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n     */\n    getWelcomeDm(id) {\n        return this.get('direct_messages/welcome_messages/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n     */\n    deleteWelcomeDm(id) {\n        return this.delete('direct_messages/welcome_messages/destroy.json', { id });\n    }\n    /**\n     * Updates a Welcome Message by the given ID.\n     * Updates to the welcome_message object are atomic.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n     */\n    updateWelcomeDm(id, data) {\n        const args = { message_data: data };\n        return this.put('direct_messages/welcome_messages/update.json', args, {\n            forceBodyMode: 'json',\n            query: { id },\n        });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listWelcomeDms(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/welcome_messages/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.WelcomeDmV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome message (rules)\n    /**\n     * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n     */\n    newWelcomeDmRule(welcomeMessageId) {\n        return this.post('direct_messages/welcome_messages/rules/new.json', {\n            welcome_message_rule: { welcome_message_id: welcomeMessageId },\n        }, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n     */\n    getWelcomeDmRule(id) {\n        return this.get('direct_messages/welcome_messages/rules/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n     */\n    deleteWelcomeDmRule(id) {\n        return this.delete('direct_messages/welcome_messages/rules/destroy.json', { id });\n    }\n    /**\n     * Retrieves all welcome DM rules for this account.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n     */\n    async listWelcomeDmRules(args = {}) {\n        const queryParams = { ...args };\n        return this.get('direct_messages/welcome_messages/rules/list.json', queryParams);\n    }\n    /**\n     * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n     * Test if a rule already exists, delete if any, then create a rule for current message ID.\n     *\n     * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n     */\n    async setWelcomeDm(welcomeMessageId, deleteAssociatedWelcomeDmWhenDeletingRule = true) {\n        var _a;\n        const existingRules = await this.listWelcomeDmRules();\n        if ((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const rule of existingRules.welcome_message_rules) {\n                await this.deleteWelcomeDmRule(rule.id);\n                if (deleteAssociatedWelcomeDmWhenDeletingRule) {\n                    await this.deleteWelcomeDm(rule.welcome_message_id);\n                }\n            }\n        }\n        return this.newWelcomeDmRule(welcomeMessageId);\n    }\n    // Part: Read indicator\n    /**\n     * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n     */\n    markDmAsRead(lastEventId, recipientId) {\n        return this.post('direct_messages/mark_read.json', {\n            last_read_event_id: lastEventId,\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n    /**\n     * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n     */\n    indicateDmTyping(recipientId) {\n        return this.post('direct_messages/indicate_typing.json', {\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n}\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;\n"]},"metadata":{},"sourceType":"script"}