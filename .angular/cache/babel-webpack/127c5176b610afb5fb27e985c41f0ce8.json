{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStream = void 0;\n\nconst events_1 = require(\"events\");\n\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\n\nconst types_1 = require(\"../types\");\n\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\n\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\")); // In seconds\n\n\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900]; // Default retry function\n\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length ? 901000 : basicRetriesAttempt[tryOccurence - 1] * 1000;\n\nclass TweetStream extends events_1.EventEmitter {\n  constructor(requestData, req, res) {\n    super();\n    this.requestData = requestData;\n    this.autoReconnect = false;\n    this.autoReconnectRetries = 5; // 2 minutes without any Twitter signal\n\n    this.keepAliveTimeoutMs = 1000 * 120;\n    this.nextRetryTimeout = basicReconnectRetry;\n    this.parser = new TweetStreamParser_1.default();\n    this.connectionProcessRunning = false;\n    this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n    this.initEventsFromParser();\n\n    if (req && res) {\n      this.req = req;\n      this.res = res;\n      this.initEventsFromRequest();\n    }\n  }\n\n  on(event, handler) {\n    return super.on(event, handler);\n  }\n\n  initEventsFromRequest() {\n    if (!this.req || !this.res) {\n      throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n    }\n\n    const errorHandler = err => {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ConnectionError,\n        error: err,\n        message: 'Connection lost or closed by Twitter.'\n      });\n      this.onConnectionError();\n    };\n\n    this.req.on('error', errorHandler);\n    this.res.on('error', errorHandler); // Usually, connection should not be closed by Twitter!\n\n    this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n    this.res.on('data', chunk => {\n      this.resetKeepAliveTimeout();\n\n      if (chunk.toString() === '\\r\\n') {\n        return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n      }\n\n      this.parser.push(chunk.toString());\n    }); // Starts the keep alive timeout\n\n    this.resetKeepAliveTimeout();\n  }\n\n  initEventsFromParser() {\n    const payloadIsError = this.requestData.payloadIsError;\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, eventData => {\n      if (payloadIsError && payloadIsError(eventData)) {\n        this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n        this.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.DataError,\n          error: eventData,\n          message: 'Twitter sent a payload that is detected as an error payload.'\n        });\n      } else {\n        this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n      }\n    });\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, error => {\n      this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.TweetParseError,\n        error,\n        message: 'Failed to parse stream data.'\n      });\n    });\n  }\n\n  resetKeepAliveTimeout() {\n    this.unbindKeepAliveTimeout();\n\n    if (this.keepAliveTimeoutMs !== Infinity) {\n      this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n    }\n  }\n\n  onKeepAliveTimeout() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n    this.onConnectionError();\n  }\n\n  unbindTimeouts() {\n    this.unbindRetryTimeout();\n    this.unbindKeepAliveTimeout();\n  }\n\n  unbindKeepAliveTimeout() {\n    if (this.keepAliveTimeout) {\n      clearTimeout(this.keepAliveTimeout);\n      this.keepAliveTimeout = undefined;\n    }\n  }\n\n  unbindRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n      this.retryTimeout = undefined;\n    }\n  }\n\n  closeWithoutEmit() {\n    this.unbindTimeouts();\n\n    if (this.res) {\n      this.res.removeAllListeners(); // Close response silentely\n\n      this.res.destroy();\n    }\n\n    if (this.req) {\n      this.req.removeAllListeners(); // Close connection silentely\n\n      this.req.destroy();\n    }\n  }\n  /** Terminate connection to Twitter. */\n\n\n  close() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n    this.closeWithoutEmit();\n  }\n  /** Unbind all listeners, and close connection. */\n\n\n  destroy() {\n    this.removeAllListeners();\n    this.close();\n  }\n  /**\n   * Make a new request that creates a new `TweetStream` instance with\n   * the same parameters, and bind current listeners to new stream.\n   */\n\n\n  clone() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const newRequest = new request_handler_helper_1.default(_this2.requestData);\n      const newStream = yield newRequest.makeRequestAsStream(); // Clone attached listeners\n\n      const listenerNames = _this2.eventNames();\n\n      for (const listener of listenerNames) {\n        const callbacks = _this2.listeners(listener);\n\n        for (const callback of callbacks) {\n          newStream.on(listener, callback);\n        }\n      }\n\n      return newStream;\n    })();\n  }\n  /** Start initial stream connection, setup options on current instance and returns itself. */\n\n\n  connect(options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof options.autoReconnect !== 'undefined') {\n        _this3.autoReconnect = options.autoReconnect;\n      }\n\n      if (typeof options.autoReconnectRetries !== 'undefined') {\n        _this3.autoReconnectRetries = options.autoReconnectRetries === 'unlimited' ? Infinity : options.autoReconnectRetries;\n      }\n\n      if (typeof options.keepAliveTimeout !== 'undefined') {\n        _this3.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable' ? Infinity : options.keepAliveTimeout;\n      }\n\n      if (typeof options.nextRetryTimeout !== 'undefined') {\n        _this3.nextRetryTimeout = options.nextRetryTimeout;\n      } // Make the connection\n\n\n      _this3.unbindTimeouts();\n\n      try {\n        yield _this3.reconnect();\n      } catch (e) {\n        _this3.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n\n        _this3.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.ConnectError,\n          error: e,\n          message: 'Connect error - Initial connection just failed.'\n        }); // Only make a reconnection attempt if autoReconnect is true!\n        // Otherwise, let error be propagated\n\n\n        if (_this3.autoReconnect) {\n          _this3.makeAutoReconnectRetry(0, e);\n        } else {\n          throw e;\n        }\n      }\n\n      return _this3;\n    })();\n  }\n  /** Make a new request to (re)connect to Twitter. */\n\n\n  reconnect() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.connectionProcessRunning) {\n        throw new Error('Connection process is already running.');\n      }\n\n      _this4.connectionProcessRunning = true;\n\n      try {\n        let initialConnection = true;\n\n        if (_this4.req) {\n          initialConnection = false;\n\n          _this4.closeWithoutEmit();\n        }\n\n        const {\n          req,\n          res\n        } = yield new request_handler_helper_1.default(_this4.requestData).makeRequestAndResolveWhenReady();\n        _this4.req = req;\n        _this4.res = res;\n\n        _this4.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n\n        _this4.parser.reset();\n\n        _this4.initEventsFromRequest();\n      } finally {\n        _this4.connectionProcessRunning = false;\n      }\n    })();\n  }\n\n  onConnectionError(retryOccurence = 0) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.unbindTimeouts(); // Close the request if necessary\n\n\n      _this5.closeWithoutEmit(); // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n\n\n      if (!_this5.autoReconnect) {\n        _this5.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n\n        return;\n      }\n\n      if (retryOccurence >= _this5.autoReconnectRetries) {\n        _this5.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n\n        _this5.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n\n        return;\n      } // If all other conditions fails, do a reconnect attempt\n\n\n      try {\n        _this5.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n\n        yield _this5.reconnect();\n      } catch (e) {\n        _this5.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n\n        _this5.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.ReconnectError,\n          error: e,\n          message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`\n        });\n\n        _this5.makeAutoReconnectRetry(retryOccurence, e);\n      }\n    })();\n  }\n\n  makeAutoReconnectRetry(retryOccurence, error) {\n    const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n    this.retryTimeout = setTimeout(() => {\n      this.onConnectionError(retryOccurence + 1);\n    }, nextRetry);\n  }\n\n  [Symbol.asyncIterator]() {\n    var _this = this;\n\n    return _wrapAsyncGenerator(function* () {\n      const eventCombiner = new TweetStreamEventCombiner_1.default(_this);\n\n      try {\n        while (true) {\n          if (!_this.req || _this.req.aborted) {\n            throw new Error('Connection closed');\n          }\n\n          if (eventCombiner.hasStack()) {\n            yield* _asyncGeneratorDelegate(_asyncIterator(eventCombiner.popStack()), _awaitAsyncGenerator);\n          }\n\n          const {\n            type,\n            payload\n          } = yield _awaitAsyncGenerator(eventCombiner.nextEvent());\n\n          if (type === 'error') {\n            throw payload;\n          }\n        }\n      } finally {\n        eventCombiner.destroy();\n      }\n    })();\n  }\n\n}\n\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/stream/TweetStream.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","TweetStream","events_1","require","request_handler_helper_1","types_1","TweetStreamEventCombiner_1","TweetStreamParser_1","basicRetriesAttempt","basicReconnectRetry","tryOccurence","length","EventEmitter","constructor","requestData","req","res","autoReconnect","autoReconnectRetries","keepAliveTimeoutMs","nextRetryTimeout","parser","default","connectionProcessRunning","onKeepAliveTimeout","bind","initEventsFromParser","initEventsFromRequest","on","event","handler","Error","errorHandler","err","emit","ETwitterStreamEvent","ConnectionError","type","error","message","onConnectionError","chunk","resetKeepAliveTimeout","toString","DataKeepAlive","push","payloadIsError","EStreamParserEvent","ParsedData","eventData","DataError","Data","ParseError","TweetParseError","unbindKeepAliveTimeout","Infinity","keepAliveTimeout","setTimeout","ConnectionLost","unbindTimeouts","unbindRetryTimeout","clearTimeout","retryTimeout","closeWithoutEmit","removeAllListeners","destroy","close","ConnectionClosed","clone","newRequest","newStream","makeRequestAsStream","listenerNames","eventNames","listener","callbacks","listeners","callback","connect","options","reconnect","e","ConnectError","makeAutoReconnectRetry","initialConnection","makeRequestAndResolveWhenReady","Connected","Reconnected","reset","retryOccurence","ReconnectLimitExceeded","ReconnectAttempt","ReconnectError","nextRetry","Symbol","asyncIterator","eventCombiner","aborted","hasStack","popStack","payload","nextEvent"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStream = void 0;\nconst events_1 = require(\"events\");\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nconst types_1 = require(\"../types\");\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length\n    ? 901000\n    : basicRetriesAttempt[tryOccurence - 1] * 1000;\nclass TweetStream extends events_1.EventEmitter {\n    constructor(requestData, req, res) {\n        super();\n        this.requestData = requestData;\n        this.autoReconnect = false;\n        this.autoReconnectRetries = 5;\n        // 2 minutes without any Twitter signal\n        this.keepAliveTimeoutMs = 1000 * 120;\n        this.nextRetryTimeout = basicReconnectRetry;\n        this.parser = new TweetStreamParser_1.default();\n        this.connectionProcessRunning = false;\n        this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n        this.initEventsFromParser();\n        if (req && res) {\n            this.req = req;\n            this.res = res;\n            this.initEventsFromRequest();\n        }\n    }\n    on(event, handler) {\n        return super.on(event, handler);\n    }\n    initEventsFromRequest() {\n        if (!this.req || !this.res) {\n            throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n        }\n        const errorHandler = (err) => {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectionError,\n                error: err,\n                message: 'Connection lost or closed by Twitter.',\n            });\n            this.onConnectionError();\n        };\n        this.req.on('error', errorHandler);\n        this.res.on('error', errorHandler);\n        // Usually, connection should not be closed by Twitter!\n        this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n        this.res.on('data', (chunk) => {\n            this.resetKeepAliveTimeout();\n            if (chunk.toString() === '\\r\\n') {\n                return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n            }\n            this.parser.push(chunk.toString());\n        });\n        // Starts the keep alive timeout\n        this.resetKeepAliveTimeout();\n    }\n    initEventsFromParser() {\n        const payloadIsError = this.requestData.payloadIsError;\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, (eventData) => {\n            if (payloadIsError && payloadIsError(eventData)) {\n                this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                    type: types_1.ETwitterStreamEvent.DataError,\n                    error: eventData,\n                    message: 'Twitter sent a payload that is detected as an error payload.',\n                });\n            }\n            else {\n                this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n            }\n        });\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, (error) => {\n            this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.TweetParseError,\n                error,\n                message: 'Failed to parse stream data.',\n            });\n        });\n    }\n    resetKeepAliveTimeout() {\n        this.unbindKeepAliveTimeout();\n        if (this.keepAliveTimeoutMs !== Infinity) {\n            this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n        }\n    }\n    onKeepAliveTimeout() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n        this.onConnectionError();\n    }\n    unbindTimeouts() {\n        this.unbindRetryTimeout();\n        this.unbindKeepAliveTimeout();\n    }\n    unbindKeepAliveTimeout() {\n        if (this.keepAliveTimeout) {\n            clearTimeout(this.keepAliveTimeout);\n            this.keepAliveTimeout = undefined;\n        }\n    }\n    unbindRetryTimeout() {\n        if (this.retryTimeout) {\n            clearTimeout(this.retryTimeout);\n            this.retryTimeout = undefined;\n        }\n    }\n    closeWithoutEmit() {\n        this.unbindTimeouts();\n        if (this.res) {\n            this.res.removeAllListeners();\n            // Close response silentely\n            this.res.destroy();\n        }\n        if (this.req) {\n            this.req.removeAllListeners();\n            // Close connection silentely\n            this.req.destroy();\n        }\n    }\n    /** Terminate connection to Twitter. */\n    close() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n        this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n    destroy() {\n        this.removeAllListeners();\n        this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n    async clone() {\n        const newRequest = new request_handler_helper_1.default(this.requestData);\n        const newStream = await newRequest.makeRequestAsStream();\n        // Clone attached listeners\n        const listenerNames = this.eventNames();\n        for (const listener of listenerNames) {\n            const callbacks = this.listeners(listener);\n            for (const callback of callbacks) {\n                newStream.on(listener, callback);\n            }\n        }\n        return newStream;\n    }\n    /** Start initial stream connection, setup options on current instance and returns itself. */\n    async connect(options = {}) {\n        if (typeof options.autoReconnect !== 'undefined') {\n            this.autoReconnect = options.autoReconnect;\n        }\n        if (typeof options.autoReconnectRetries !== 'undefined') {\n            this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited'\n                ? Infinity\n                : options.autoReconnectRetries;\n        }\n        if (typeof options.keepAliveTimeout !== 'undefined') {\n            this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable'\n                ? Infinity\n                : options.keepAliveTimeout;\n        }\n        if (typeof options.nextRetryTimeout !== 'undefined') {\n            this.nextRetryTimeout = options.nextRetryTimeout;\n        }\n        // Make the connection\n        this.unbindTimeouts();\n        try {\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectError,\n                error: e,\n                message: 'Connect error - Initial connection just failed.',\n            });\n            // Only make a reconnection attempt if autoReconnect is true!\n            // Otherwise, let error be propagated\n            if (this.autoReconnect) {\n                this.makeAutoReconnectRetry(0, e);\n            }\n            else {\n                throw e;\n            }\n        }\n        return this;\n    }\n    /** Make a new request to (re)connect to Twitter. */\n    async reconnect() {\n        if (this.connectionProcessRunning) {\n            throw new Error('Connection process is already running.');\n        }\n        this.connectionProcessRunning = true;\n        try {\n            let initialConnection = true;\n            if (this.req) {\n                initialConnection = false;\n                this.closeWithoutEmit();\n            }\n            const { req, res } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n            this.req = req;\n            this.res = res;\n            this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n            this.parser.reset();\n            this.initEventsFromRequest();\n        }\n        finally {\n            this.connectionProcessRunning = false;\n        }\n    }\n    async onConnectionError(retryOccurence = 0) {\n        this.unbindTimeouts();\n        // Close the request if necessary\n        this.closeWithoutEmit();\n        // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n        if (!this.autoReconnect) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        if (retryOccurence >= this.autoReconnectRetries) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        // If all other conditions fails, do a reconnect attempt\n        try {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ReconnectError,\n                error: e,\n                message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`,\n            });\n            this.makeAutoReconnectRetry(retryOccurence, e);\n        }\n    }\n    makeAutoReconnectRetry(retryOccurence, error) {\n        const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n        this.retryTimeout = setTimeout(() => {\n            this.onConnectionError(retryOccurence + 1);\n        }, nextRetry);\n    }\n    async *[Symbol.asyncIterator]() {\n        const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n        try {\n            while (true) {\n                if (!this.req || this.req.aborted) {\n                    throw new Error('Connection closed');\n                }\n                if (eventCombiner.hasStack()) {\n                    yield* eventCombiner.popStack();\n                }\n                const { type, payload } = await eventCombiner.nextEvent();\n                if (type === 'error') {\n                    throw payload;\n                }\n            }\n        }\n        finally {\n            eventCombiner.destroy();\n        }\n    }\n}\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;\n"]},"metadata":{},"sourceType":"script"}