{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n/**\n * Base class for Twitter instances\n */\n\n\nclass TwitterApiBase extends request_maker_mixin_1.ClientRequestMaker {\n  constructor(token) {\n    super();\n    this._currentUser = null;\n\n    if (typeof token === 'string') {\n      this._bearerToken = token;\n    } else if (token instanceof TwitterApiBase) {\n      this._accessToken = token._accessToken;\n      this._accessSecret = token._accessSecret;\n      this._consumerToken = token._consumerToken;\n      this._consumerSecret = token._consumerSecret;\n      this._oauth = token._oauth;\n      this._prefix = token._prefix;\n      this._bearerToken = token._bearerToken;\n      this._basicToken = token._basicToken;\n      this._clientId = token._clientId;\n      this._rateLimits = token._rateLimits;\n    } else if (typeof token === 'object' && 'appKey' in token) {\n      this._consumerToken = token.appKey;\n      this._consumerSecret = token.appSecret;\n\n      if (token.accessToken && token.accessSecret) {\n        this._accessToken = token.accessToken;\n        this._accessSecret = token.accessSecret;\n      }\n\n      this._oauth = this.buildOAuth();\n    } else if (typeof token === 'object' && 'username' in token) {\n      const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n      this._basicToken = Buffer.from(key).toString('base64');\n    } else if (typeof token === 'object' && 'clientId' in token) {\n      this._clientId = token.clientId;\n    }\n  }\n  /* Prefix/Token handling */\n\n\n  setPrefix(prefix) {\n    this._prefix = prefix;\n  }\n\n  cloneWithPrefix(prefix) {\n    const clone = this.constructor(this);\n    clone.setPrefix(prefix);\n    return clone;\n  }\n\n  getActiveTokens() {\n    if (this._bearerToken) {\n      return {\n        type: 'oauth2',\n        bearerToken: this._bearerToken\n      };\n    } else if (this._basicToken) {\n      return {\n        type: 'basic',\n        token: this._basicToken\n      };\n    } else if (this._consumerSecret && this._oauth) {\n      return {\n        type: 'oauth-1.0a',\n        appKey: this._consumerToken,\n        appSecret: this._consumerSecret,\n        accessToken: this._accessToken,\n        accessSecret: this._accessSecret\n      };\n    } else if (this._clientId) {\n      return {\n        type: 'oauth2-user',\n        clientId: this._clientId\n      };\n    }\n\n    return {\n      type: 'none'\n    };\n  }\n  /* Rate limit cache */\n\n  /**\n   * Tells if you hit the Twitter rate limit for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  hasHitRateLimit(endpoint) {\n    var _a;\n\n    if (this.isRateLimitStatusObsolete(endpoint)) {\n      return false;\n    }\n\n    return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n  }\n  /**\n   * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n   * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n   */\n\n\n  isRateLimitStatusObsolete(endpoint) {\n    const rateLimit = this.getLastRateLimitStatus(endpoint);\n\n    if (rateLimit === undefined) {\n      return true;\n    } // Timestamps are exprimed in seconds, JS works with ms\n\n\n    return rateLimit.reset * 1000 < Date.now();\n  }\n  /**\n   * Get the last obtained Twitter rate limit information for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  getLastRateLimitStatus(endpoint) {\n    const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : this._prefix + endpoint;\n    return this._rateLimits[endpointWithPrefix];\n  }\n  /* Current user cache */\n\n  /** Get cached current user. */\n\n\n  getCurrentUserObject(forceFetch = false) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!forceFetch && _this._currentUser) {\n        return _this._currentUser;\n      }\n\n      const currentUser = yield _this.get('account/verify_credentials.json', {\n        tweet_mode: 'extended'\n      }, {\n        prefix: 'https://api.twitter.com/1.1/'\n      });\n      _this._currentUser = currentUser;\n      return currentUser;\n    })();\n  }\n\n  get(url, query = {}, {\n    fullResponse,\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (prefix) url = prefix + url;\n      const resp = yield _this2.send({\n        url,\n        method: 'GET',\n        query,\n        ...rest\n      });\n      return fullResponse ? resp : resp.data;\n    })();\n  }\n\n  delete(url, query = {}, {\n    fullResponse,\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (prefix) url = prefix + url;\n      const resp = yield _this3.send({\n        url,\n        method: 'DELETE',\n        query,\n        ...rest\n      });\n      return fullResponse ? resp : resp.data;\n    })();\n  }\n\n  post(url, body, {\n    fullResponse,\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (prefix) url = prefix + url;\n      const resp = yield _this4.send({\n        url,\n        method: 'POST',\n        body,\n        ...rest\n      });\n      return fullResponse ? resp : resp.data;\n    })();\n  }\n\n  put(url, body, {\n    fullResponse,\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (prefix) url = prefix + url;\n      const resp = yield _this5.send({\n        url,\n        method: 'PUT',\n        body,\n        ...rest\n      });\n      return fullResponse ? resp : resp.data;\n    })();\n  }\n\n  patch(url, body, {\n    fullResponse,\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (prefix) url = prefix + url;\n      const resp = yield _this6.send({\n        url,\n        method: 'PATCH',\n        body,\n        ...rest\n      });\n      return fullResponse ? resp : resp.data;\n    })();\n  }\n\n  getStream(url, query, {\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    return this.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n  }\n\n  postStream(url, body, {\n    prefix = this._prefix,\n    ...rest\n  } = {}) {\n    return this.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n  }\n\n}\n\nexports.default = TwitterApiBase;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/client.base.js"],"names":["Object","defineProperty","exports","value","request_maker_mixin_1","require","TwitterApiBase","ClientRequestMaker","constructor","token","_currentUser","_bearerToken","_accessToken","_accessSecret","_consumerToken","_consumerSecret","_oauth","_prefix","_basicToken","_clientId","_rateLimits","appKey","appSecret","accessToken","accessSecret","buildOAuth","key","encodeURIComponent","username","password","Buffer","from","toString","clientId","setPrefix","prefix","cloneWithPrefix","clone","getActiveTokens","type","bearerToken","hasHitRateLimit","endpoint","_a","isRateLimitStatusObsolete","getLastRateLimitStatus","remaining","rateLimit","undefined","reset","Date","now","endpointWithPrefix","match","getCurrentUserObject","forceFetch","currentUser","get","tweet_mode","url","query","fullResponse","rest","resp","send","method","data","delete","post","body","put","patch","getStream","sendStream","postStream","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n/**\n * Base class for Twitter instances\n */\nclass TwitterApiBase extends request_maker_mixin_1.ClientRequestMaker {\n    constructor(token) {\n        super();\n        this._currentUser = null;\n        if (typeof token === 'string') {\n            this._bearerToken = token;\n        }\n        else if (token instanceof TwitterApiBase) {\n            this._accessToken = token._accessToken;\n            this._accessSecret = token._accessSecret;\n            this._consumerToken = token._consumerToken;\n            this._consumerSecret = token._consumerSecret;\n            this._oauth = token._oauth;\n            this._prefix = token._prefix;\n            this._bearerToken = token._bearerToken;\n            this._basicToken = token._basicToken;\n            this._clientId = token._clientId;\n            this._rateLimits = token._rateLimits;\n        }\n        else if (typeof token === 'object' && 'appKey' in token) {\n            this._consumerToken = token.appKey;\n            this._consumerSecret = token.appSecret;\n            if (token.accessToken && token.accessSecret) {\n                this._accessToken = token.accessToken;\n                this._accessSecret = token.accessSecret;\n            }\n            this._oauth = this.buildOAuth();\n        }\n        else if (typeof token === 'object' && 'username' in token) {\n            const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n            this._basicToken = Buffer.from(key).toString('base64');\n        }\n        else if (typeof token === 'object' && 'clientId' in token) {\n            this._clientId = token.clientId;\n        }\n    }\n    /* Prefix/Token handling */\n    setPrefix(prefix) {\n        this._prefix = prefix;\n    }\n    cloneWithPrefix(prefix) {\n        const clone = this.constructor(this);\n        clone.setPrefix(prefix);\n        return clone;\n    }\n    getActiveTokens() {\n        if (this._bearerToken) {\n            return {\n                type: 'oauth2',\n                bearerToken: this._bearerToken,\n            };\n        }\n        else if (this._basicToken) {\n            return {\n                type: 'basic',\n                token: this._basicToken,\n            };\n        }\n        else if (this._consumerSecret && this._oauth) {\n            return {\n                type: 'oauth-1.0a',\n                appKey: this._consumerToken,\n                appSecret: this._consumerSecret,\n                accessToken: this._accessToken,\n                accessSecret: this._accessSecret,\n            };\n        }\n        else if (this._clientId) {\n            return {\n                type: 'oauth2-user',\n                clientId: this._clientId,\n            };\n        }\n        return { type: 'none' };\n    }\n    /* Rate limit cache */\n    /**\n     * Tells if you hit the Twitter rate limit for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    hasHitRateLimit(endpoint) {\n        var _a;\n        if (this.isRateLimitStatusObsolete(endpoint)) {\n            return false;\n        }\n        return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n    }\n    /**\n     * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n     * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n     */\n    isRateLimitStatusObsolete(endpoint) {\n        const rateLimit = this.getLastRateLimitStatus(endpoint);\n        if (rateLimit === undefined) {\n            return true;\n        }\n        // Timestamps are exprimed in seconds, JS works with ms\n        return (rateLimit.reset * 1000) < Date.now();\n    }\n    /**\n     * Get the last obtained Twitter rate limit information for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    getLastRateLimitStatus(endpoint) {\n        const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : (this._prefix + endpoint);\n        return this._rateLimits[endpointWithPrefix];\n    }\n    /* Current user cache */\n    /** Get cached current user. */\n    async getCurrentUserObject(forceFetch = false) {\n        if (!forceFetch && this._currentUser) {\n            return this._currentUser;\n        }\n        const currentUser = await this.get('account/verify_credentials.json', { tweet_mode: 'extended' }, { prefix: 'https://api.twitter.com/1.1/' });\n        this._currentUser = currentUser;\n        return currentUser;\n    }\n    async get(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async delete(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'DELETE',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async post(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async put(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'PUT',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async patch(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this.send({\n            url,\n            method: 'PATCH',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    getStream(url, query, { prefix = this._prefix, ...rest } = {}) {\n        return this.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n    }\n    postStream(url, body, { prefix = this._prefix, ...rest } = {}) {\n        return this.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n    }\n}\nexports.default = TwitterApiBase;\n"]},"metadata":{},"sourceType":"script"}