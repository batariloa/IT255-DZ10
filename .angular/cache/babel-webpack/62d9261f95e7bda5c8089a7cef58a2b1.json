{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _1 = __importDefault(require(\".\"));\n\nconst client_base_1 = __importDefault(require(\"../client.base\"));\n\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\n\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\n\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\n/**\n * Twitter v1.1 and v2 API client.\n */\n\n\nclass TwitterApiReadOnly extends client_base_1.default {\n  /* Direct access to subclients */\n  get v1() {\n    if (this._v1) return this._v1;\n    return this._v1 = new client_v1_read_1.default(this);\n  }\n\n  get v2() {\n    if (this._v2) return this._v2;\n    return this._v2 = new client_v2_read_1.default(this);\n  }\n  /**\n   * Fetch and cache current user.\n   * This method can only be called with a OAuth 1.0a user authentification.\n   *\n   * You can use this method to test if authentification was successful.\n   * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n   */\n\n\n  currentUser(forceFetch = false) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.getCurrentUserObject(forceFetch);\n    })();\n  }\n  /* Shortcuts to endpoints */\n\n\n  search(what, options) {\n    return this.v2.search(what, options);\n  }\n  /* Authentification */\n\n  /**\n   * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with consumer keys\n   * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n   *\n   * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n   * // redirect end-user to tokenRequest.url\n   *\n   * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n   * ```\n   */\n\n\n  generateAuthLink(oauth_callback = 'oob', {\n    authAccessType,\n    linkMode = 'authenticate',\n    forceLogin,\n    screenName\n  } = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const oauthResult = yield _this2.post('https://api.twitter.com/oauth/request_token', {\n        oauth_callback,\n        x_auth_access_type: authAccessType\n      });\n      let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n\n      if (forceLogin !== undefined) {\n        url += `&force_login=${encodeURIComponent(forceLogin)}`;\n      }\n\n      if (screenName !== undefined) {\n        url += `&screen_name=${encodeURIComponent(screenName)}`;\n      }\n\n      return {\n        url,\n        ...oauthResult\n      };\n    })();\n  }\n  /**\n   * Obtain access to user-based OAuth 1.0 auth.\n   *\n   * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n   * instanciate the new TwitterApi instance.\n   *\n   * ```ts\n   * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n   * const requestClient = new TwitterApi({\n   *  appKey: 'consumer_key',\n   *  appSecret: 'consumer_secret',\n   *  accessToken: 'oauth_token',\n   *  accessSecret: 'oauth_token_secret'\n   * });\n   *\n   * // Use oauth_verifier obtained from callback request\n   * const { client: userClient } = await requestClient.login('oauth_verifier');\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n\n\n  login(oauth_verifier) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const oauth_result = yield _this3.post('https://api.twitter.com/oauth/access_token', {\n        oauth_token: _this3._accessToken,\n        oauth_verifier\n      });\n      const client = new _1.default({\n        appKey: _this3._consumerToken,\n        appSecret: _this3._consumerSecret,\n        accessToken: oauth_result.oauth_token,\n        accessSecret: oauth_result.oauth_token_secret\n      });\n      return {\n        accessToken: oauth_result.oauth_token,\n        accessSecret: oauth_result.oauth_token_secret,\n        userId: oauth_result.user_id,\n        screenName: oauth_result.screen_name,\n        client\n      };\n    })();\n  }\n  /**\n   * Enable application-only authentification.\n   *\n   * To make the request, instanciate TwitterApi with consumer and secret.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n   * const appClient = await requestClient.appLogin();\n   *\n   * // Use {appClient} to make requests\n   * ```\n   */\n\n\n  appLogin() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this4._consumerToken || !_this4._consumerSecret) throw new Error('You must setup TwitterApi instance with consumers to enable app-only login'); // Create a client with Basic authentification\n\n      const basicClient = new _1.default({\n        username: _this4._consumerToken,\n        password: _this4._consumerSecret\n      });\n      const res = yield basicClient.post('https://api.twitter.com/oauth2/token', {\n        grant_type: 'client_credentials'\n      }); // New object with Bearer token\n\n      return new _1.default(res.access_token);\n    })();\n  }\n  /* OAuth 2 user authentification */\n\n  /**\n   * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with client ID\n   * const client = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * // Generate a link to callback URL that will gives a token with tweet+user read access\n   * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n   *\n   * // Extract props from generate link\n   * const { url, state, codeVerifier } = link;\n   *\n   * // redirect end-user to url\n   * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n   * ```\n   */\n\n\n  generateOAuth2AuthLink(redirectUri, options = {}) {\n    var _a, _b;\n\n    if (!this._clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n\n    const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n    const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n    const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n    const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n    const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n    const url = new URL('https://twitter.com/i/oauth2/authorize');\n    url.searchParams.set('response_type', 'code');\n    url.searchParams.set('client_id', this._clientId);\n    url.searchParams.set('redirect_uri', redirectUri);\n    url.searchParams.set('state', state);\n    url.searchParams.set('code_challenge', codeChallenge);\n    url.searchParams.set('code_challenge_method', 's256');\n    url.searchParams.set('scope', scope);\n    return {\n      url: url.toString(),\n      state,\n      codeVerifier,\n      codeChallenge\n    };\n  }\n  /**\n   * Obtain access to user-based OAuth 2.0 auth.\n   *\n   * After user is redirect from your callback, use obtained code to\n   * instanciate the new TwitterApi instance.\n   *\n   * ```ts\n   * // Use the saved codeVerifier associated to state (present in query string of callback)\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n   *  code: 'codeFromQueryString',\n   *  // the same URL given to generateOAuth2AuthLink\n   *  redirectUri,\n   *  // the verifier returned by generateOAuth2AuthLink\n   *  codeVerifier,\n   * });\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * // {refreshToken} is defined if 'offline.access' is in scope.\n   * ```\n   */\n\n\n  loginWithOAuth2({\n    code,\n    codeVerifier,\n    redirectUri\n  }) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this5._clientId) {\n        throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n      }\n\n      const accessTokenResult = yield _this5.post('https://api.twitter.com/2/oauth2/token', {\n        code,\n        code_verifier: codeVerifier,\n        redirect_uri: redirectUri,\n        grant_type: 'authorization_code',\n        client_id: _this5._clientId\n      });\n      return _this5.parseOAuth2AccessTokenResult(accessTokenResult);\n    })();\n  }\n  /**\n   * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n\n\n  refreshOAuth2Token(refreshToken) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this6._clientId) {\n        throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n      }\n\n      const accessTokenResult = yield _this6.post('https://api.twitter.com/2/oauth2/token', {\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token',\n        client_id: _this6._clientId\n      });\n      return _this6.parseOAuth2AccessTokenResult(accessTokenResult);\n    })();\n  }\n  /**\n   * Revoke a single user-based OAuth 2.0 token.\n   *\n   * You must specify its source, access token (directly after login)\n   * or refresh token (if you've called `.refreshOAuth2Token` before).\n   */\n\n\n  revokeOAuth2Token(token, tokenType = 'access_token') {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this7._clientId) {\n        throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n      }\n\n      return yield _this7.post('https://api.twitter.com/2/oauth2/revoke', {\n        client_id: _this7._clientId,\n        token,\n        token_type_hint: tokenType\n      });\n    })();\n  }\n\n  parseOAuth2AccessTokenResult(result) {\n    const client = new _1.default(result.access_token);\n    const scope = result.scope.split(' ').filter(e => e);\n    return {\n      client,\n      expiresIn: result.expires_in,\n      accessToken: result.access_token,\n      scope,\n      refreshToken: result.refresh_token\n    };\n  }\n\n}\n\nexports.default = TwitterApiReadOnly;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/client/readonly.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_1","require","client_base_1","client_v1_read_1","client_v2_read_1","oauth2_helper_1","TwitterApiReadOnly","default","v1","_v1","v2","_v2","currentUser","forceFetch","getCurrentUserObject","search","what","options","generateAuthLink","oauth_callback","authAccessType","linkMode","forceLogin","screenName","oauthResult","post","x_auth_access_type","url","encodeURIComponent","oauth_token","undefined","login","oauth_verifier","oauth_result","_accessToken","client","appKey","_consumerToken","appSecret","_consumerSecret","accessToken","accessSecret","oauth_token_secret","userId","user_id","screen_name","appLogin","Error","basicClient","username","password","res","grant_type","access_token","generateOAuth2AuthLink","redirectUri","_a","_b","_clientId","state","OAuth2Helper","generateRandomString","codeVerifier","getCodeVerifier","codeChallenge","getCodeChallengeFromVerifier","rawScope","scope","Array","isArray","join","URL","searchParams","set","toString","loginWithOAuth2","code","accessTokenResult","code_verifier","redirect_uri","client_id","parseOAuth2AccessTokenResult","refreshOAuth2Token","refreshToken","refresh_token","revokeOAuth2Token","token","tokenType","token_type_hint","result","split","filter","e","expiresIn","expires_in"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = __importDefault(require(\".\"));\nconst client_base_1 = __importDefault(require(\"../client.base\"));\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\n/**\n * Twitter v1.1 and v2 API client.\n */\nclass TwitterApiReadOnly extends client_base_1.default {\n    /* Direct access to subclients */\n    get v1() {\n        if (this._v1)\n            return this._v1;\n        return this._v1 = new client_v1_read_1.default(this);\n    }\n    get v2() {\n        if (this._v2)\n            return this._v2;\n        return this._v2 = new client_v2_read_1.default(this);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentification.\n     *\n     * You can use this method to test if authentification was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n    async currentUser(forceFetch = false) {\n        return await this.getCurrentUserObject(forceFetch);\n    }\n    /* Shortcuts to endpoints */\n    search(what, options) {\n        return this.v2.search(what, options);\n    }\n    /* Authentification */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n    async generateAuthLink(oauth_callback = 'oob', { authAccessType, linkMode = 'authenticate', forceLogin, screenName, } = {}) {\n        const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', { oauth_callback, x_auth_access_type: authAccessType });\n        let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n        if (forceLogin !== undefined) {\n            url += `&force_login=${encodeURIComponent(forceLogin)}`;\n        }\n        if (screenName !== undefined) {\n            url += `&screen_name=${encodeURIComponent(screenName)}`;\n        }\n        return {\n            url,\n            ...oauthResult,\n        };\n    }\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async login(oauth_verifier) {\n        const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', { oauth_token: this._accessToken, oauth_verifier });\n        const client = new _1.default({\n            appKey: this._consumerToken,\n            appSecret: this._consumerSecret,\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n        });\n        return {\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n            userId: oauth_result.user_id,\n            screenName: oauth_result.screen_name,\n            client,\n        };\n    }\n    /**\n     * Enable application-only authentification.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n    async appLogin() {\n        if (!this._consumerToken || !this._consumerSecret)\n            throw new Error('You must setup TwitterApi instance with consumers to enable app-only login');\n        // Create a client with Basic authentification\n        const basicClient = new _1.default({ username: this._consumerToken, password: this._consumerSecret });\n        const res = await basicClient.post('https://api.twitter.com/oauth2/token', { grant_type: 'client_credentials' });\n        // New object with Bearer token\n        return new _1.default(res.access_token);\n    }\n    /* OAuth 2 user authentification */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n    generateOAuth2AuthLink(redirectUri, options = {}) {\n        var _a, _b;\n        if (!this._clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n        const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n        const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n        const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n        const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n        const url = new URL('https://twitter.com/i/oauth2/authorize');\n        url.searchParams.set('response_type', 'code');\n        url.searchParams.set('client_id', this._clientId);\n        url.searchParams.set('redirect_uri', redirectUri);\n        url.searchParams.set('state', state);\n        url.searchParams.set('code_challenge', codeChallenge);\n        url.searchParams.set('code_challenge_method', 's256');\n        url.searchParams.set('scope', scope);\n        return {\n            url: url.toString(),\n            state,\n            codeVerifier,\n            codeChallenge,\n        };\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n    async loginWithOAuth2({ code, codeVerifier, redirectUri }) {\n        if (!this._clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            code,\n            code_verifier: codeVerifier,\n            redirect_uri: redirectUri,\n            grant_type: 'authorization_code',\n            client_id: this._clientId,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async refreshOAuth2Token(refreshToken) {\n        if (!this._clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n            client_id: this._clientId,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n    async revokeOAuth2Token(token, tokenType = 'access_token') {\n        if (!this._clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n            client_id: this._clientId,\n            token,\n            token_type_hint: tokenType,\n        });\n    }\n    parseOAuth2AccessTokenResult(result) {\n        const client = new _1.default(result.access_token);\n        const scope = result.scope.split(' ').filter(e => e);\n        return {\n            client,\n            expiresIn: result.expires_in,\n            accessToken: result.access_token,\n            scope,\n            refreshToken: result.refresh_token,\n        };\n    }\n}\nexports.default = TwitterApiReadOnly;\n"]},"metadata":{},"sourceType":"script"}