{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst globals_1 = require(\"../globals\");\n\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\n\nconst fs = __importStar(require(\"fs\"));\n\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\n\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  get readOnly() {\n    return this;\n  }\n  /* Tweet API */\n\n  /**\n   * Post a new tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  tweet(status, payload = {}) {\n    const queryParams = {\n      status,\n      tweet_mode: 'extended',\n      ...payload\n    };\n    return this.post('statuses/update.json', queryParams);\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  tweetThread(tweets) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const postedTweets = [];\n\n      for (const tweet of tweets) {\n        // Retrieve the last sent tweet\n        const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n        const queryParams = { ...(typeof tweet === 'string' ? {\n            status: tweet\n          } : tweet)\n        }; // Reply to an existing tweet if needed\n\n        const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n        const status = queryParams.status;\n\n        if (inReplyToId) {\n          postedTweets.push(yield _this.reply(status, inReplyToId, queryParams));\n        } else {\n          postedTweets.push(yield _this.tweet(status, queryParams));\n        }\n      }\n\n      return postedTweets;\n    })();\n  }\n  /**\n   * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  reply(status, in_reply_to_status_id, payload = {}) {\n    return this.tweet(status, {\n      auto_populate_reply_metadata: true,\n      in_reply_to_status_id,\n      ...payload\n    });\n  }\n  /**\n   * Delete an existing tweet belonging to you.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n   */\n\n\n  deleteTweet(tweetId) {\n    return this.post('statuses/destroy/:id.json', {\n      tweet_mode: 'extended'\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* User API */\n\n  /**\n   * Report the specified user as a spam account to Twitter.\n   * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n   */\n\n\n  reportUserAsSpam(options) {\n    return this.post('users/report_spam.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Turn on/off Retweets and device notifications from the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n   */\n\n\n  updateFriendship(options) {\n    return this.post('friendships/update.json', options);\n  }\n  /* Account API */\n\n  /**\n   * Update current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n\n\n  updateAccountSettings(options) {\n    return this.post('account/settings.json', options);\n  }\n  /**\n   * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n   */\n\n\n  updateAccountProfile(options) {\n    return this.post('account/update_profile.json', options);\n  }\n  /**\n   * Uploads a profile banner on behalf of the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n   */\n\n\n  updateAccountProfileBanner(file, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = {\n        banner: yield media_helpers_v1_1.readFileIntoBuffer(file),\n        ...options\n      };\n      return _this2.post('account/update_profile_banner.json', queryParams, {\n        forceBodyMode: 'form-data'\n      });\n    })();\n  }\n  /**\n   * Updates the authenticating user's profile image.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n   */\n\n\n  updateAccountProfileImage(file, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = {\n        tweet_mode: 'extended',\n        image: yield media_helpers_v1_1.readFileIntoBuffer(file),\n        ...options\n      };\n      return _this3.post('account/update_profile_image.json', queryParams, {\n        forceBodyMode: 'form-data'\n      });\n    })();\n  }\n  /**\n   * Removes the uploaded profile banner for the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n   */\n\n\n  removeAccountProfileBanner() {\n    return this.post('account/remove_profile_banner.json');\n  }\n  /* Lists */\n\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n   */\n\n\n  createList(options) {\n    return this.post('lists/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n   */\n\n\n  updateList(options) {\n    return this.post('lists/update.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n   */\n\n\n  removeList(options) {\n    return this.post('lists/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n   * it will target `lists/members/create_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n   */\n\n\n  addListMembers(options) {\n    const hasMultiple = options.user_id && helpers_1.hasMultipleItems(options.user_id) || options.screen_name && helpers_1.hasMultipleItems(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n   * it will target `lists/members/destroy_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n   */\n\n\n  removeListMembers(options) {\n    const hasMultiple = options.user_id && helpers_1.hasMultipleItems(options.user_id) || options.screen_name && helpers_1.hasMultipleItems(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n   */\n\n\n  subscribeToList(options) {\n    return this.post('lists/subscribers/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n   */\n\n\n  unsubscribeOfList(options) {\n    return this.post('lists/subscribers/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /* Media upload API */\n\n  /**\n   * This endpoint can be used to provide additional information about the uploaded media_id.\n   * This feature is currently only supported for images and GIFs.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n   */\n\n\n  createMediaMetadata(mediaId, metadata) {\n    return this.post('media/metadata/create.json', {\n      media_id: mediaId,\n      ...metadata\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n   * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n   */\n\n\n  createMediaSubtitles(mediaId, subtitles) {\n    return this.post('media/subtitles/create.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n   */\n\n\n  deleteMediaSubtitles(mediaId, ...languages) {\n    return this.post('media/subtitles/delete.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles: languages.map(lang => ({\n          language_code: lang\n        }))\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n   *\n   * @param file If `string`, filename is supposed.\n   * A `Buffer` is a raw file.\n   * `fs.promises.FileHandle` or `number` are file pointers.\n   *\n   * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n   * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n   * If type is not part of the enum, it will be used as mime type.\n   *\n   * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n   *\n   * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n   *\n   * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n   *\n   * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n   *\n   * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n   * You must specify it if you send a media to use in DMs.\n   */\n\n\n  uploadMedia(file, options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : 1024 * 1024;\n      const {\n        fileHandle,\n        mediaCategory,\n        fileSize,\n        mimeType\n      } = yield _this4.getUploadMediaRequirements(file, options); // Get the file handle (if not buffer)\n\n      try {\n        // Finally! We can send INIT message.\n        const mediaData = yield _this4.post(UPLOAD_ENDPOINT, {\n          command: 'INIT',\n          total_bytes: fileSize,\n          media_type: mimeType,\n          media_category: mediaCategory,\n          additional_owners: options.additionalOwners,\n          shared: options.shared ? true : undefined\n        }, {\n          prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n        }); // Upload the media chunk by chunk\n\n        yield _this4.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads); // Finalize media\n\n        const fullMediaData = yield _this4.post(UPLOAD_ENDPOINT, {\n          command: 'FINALIZE',\n          media_id: mediaData.media_id_string\n        }, {\n          prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n        });\n\n        if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n          // Must wait if video is still computed\n          yield _this4.awaitForMediaProcessingCompletion(fullMediaData);\n        } // Video is ready, return media_id\n\n\n        return fullMediaData.media_id_string;\n      } finally {\n        // Close file if any\n        if (typeof file === 'number') {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          fs.close(file, () => {});\n        } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n          fileHandle.close();\n        }\n      }\n    })();\n  }\n\n  awaitForMediaProcessingCompletion(fullMediaData) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        fullMediaData = yield _this5.mediaInfo(fullMediaData.media_id_string);\n\n        if (!fullMediaData.processing_info || fullMediaData.processing_info.state === 'succeeded') {\n          // Ok, completed!\n          return;\n        }\n\n        if (fullMediaData.processing_info.state === 'failed') {\n          throw new Error('Failed to process the media.');\n        }\n\n        if (fullMediaData.processing_info.check_after_secs) {\n          // Await for given seconds\n          yield media_helpers_v1_1.sleepSecs(fullMediaData.processing_info.check_after_secs);\n        } else {\n          // No info; Await for 5 seconds\n          yield media_helpers_v1_1.sleepSecs(5);\n        }\n      }\n    })();\n  }\n\n  getUploadMediaRequirements(file, {\n    type,\n    target\n  } = {}) {\n    return _asyncToGenerator(function* () {\n      // Get the file handle (if not buffer)\n      let fileHandle;\n\n      try {\n        fileHandle = yield media_helpers_v1_1.getFileHandle(file); // Get the mimetype\n\n        const mimeType = media_helpers_v1_1.getMimeType(file, type); // Get the media category\n\n        let mediaCategory; // If explicit longmp4 OR explicit MIME type and not DM target\n\n        if (type === 'longmp4' || type === 'video/mp4' && target !== 'dm') {\n          mediaCategory = 'amplify_video';\n        } else {\n          mediaCategory = media_helpers_v1_1.getMediaCategoryByMime(mimeType, target !== null && target !== void 0 ? target : 'tweet');\n        }\n\n        return {\n          fileHandle,\n          mediaCategory,\n          fileSize: yield media_helpers_v1_1.getFileSizeFromFileHandle(fileHandle),\n          mimeType\n        };\n      } catch (e) {\n        // Close file if any\n        if (typeof file === 'number') {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          fs.close(file, () => {});\n        } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n          fileHandle.close();\n        }\n\n        throw e;\n      }\n    })();\n  }\n\n  mediaChunkedUpload(fileHandle, chunkLength, mediaId, maxConcurrentUploads = 3) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      // Send chunk by chunk\n      let chunkIndex = 0;\n\n      if (maxConcurrentUploads < 1) {\n        throw new RangeError('Bad maxConcurrentUploads parameter.');\n      } // Creating a buffer for doing file stuff (if we don't have one)\n\n\n      const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength); // Sliced/filled buffer returned for each part\n\n      let readBuffer; // Needed to know when we should stop reading the file\n\n      let nread; // Needed to use the buffer object (file handles always \"remembers\" file position)\n\n      let offset = 0;\n      [readBuffer, nread] = yield media_helpers_v1_1.readNextPartOf(fileHandle, chunkLength, offset, buffer);\n      offset += nread; // Handle max concurrent uploads\n\n      const currentUploads = new Set(); // Read buffer until file is completely read\n\n      while (nread) {\n        const mediaBufferPart = readBuffer.slice(0, nread); // Sent part if part has something inside\n\n        if (mediaBufferPart.length) {\n          const request = _this6.post(UPLOAD_ENDPOINT, {\n            command: 'APPEND',\n            media_id: mediaId,\n            segment_index: chunkIndex,\n            media: mediaBufferPart\n          }, {\n            prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n          });\n\n          currentUploads.add(request);\n          request.then(() => {\n            currentUploads.delete(request);\n          });\n          chunkIndex++;\n        }\n\n        if (currentUploads.size >= maxConcurrentUploads) {\n          // Await for first promise to be finished\n          yield Promise.race(currentUploads);\n        }\n\n        [readBuffer, nread] = yield media_helpers_v1_1.readNextPartOf(fileHandle, chunkLength, offset, buffer);\n        offset += nread;\n      }\n\n      yield Promise.all([...currentUploads]);\n    })();\n  }\n\n}\n\nexports.default = TwitterApiv1ReadWrite;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/v1/client.v1.write.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","__importDefault","exports","globals_1","require","client_v1_read_1","fs","media_helpers_v1_1","helpers_1","UPLOAD_ENDPOINT","TwitterApiv1ReadWrite","default","constructor","arguments","_prefix","API_V1_1_PREFIX","readOnly","tweet","status","payload","queryParams","tweet_mode","post","tweetThread","tweets","postedTweets","lastTweet","length","inReplyToId","id_str","in_reply_to_status_id","push","reply","auto_populate_reply_metadata","deleteTweet","tweetId","params","id","reportUserAsSpam","options","updateFriendship","updateAccountSettings","updateAccountProfile","updateAccountProfileBanner","file","banner","readFileIntoBuffer","forceBodyMode","updateAccountProfileImage","image","removeAccountProfileBanner","createList","updateList","removeList","addListMembers","hasMultiple","user_id","hasMultipleItems","screen_name","endpoint","removeListMembers","subscribeToList","unsubscribeOfList","createMediaMetadata","mediaId","metadata","media_id","prefix","API_V1_1_UPLOAD_PREFIX","createMediaSubtitles","subtitles","media_category","subtitle_info","deleteMediaSubtitles","languages","map","lang","language_code","uploadMedia","_a","chunkLength","fileHandle","mediaCategory","fileSize","mimeType","getUploadMediaRequirements","mediaData","command","total_bytes","media_type","additional_owners","additionalOwners","shared","mediaChunkedUpload","media_id_string","maxConcurrentUploads","fullMediaData","processing_info","state","awaitForMediaProcessingCompletion","close","Buffer","mediaInfo","Error","check_after_secs","sleepSecs","type","target","getFileHandle","getMimeType","getMediaCategoryByMime","getFileSizeFromFileHandle","e","chunkIndex","RangeError","buffer","alloc","readBuffer","nread","offset","readNextPartOf","currentUploads","Set","mediaBufferPart","slice","request","segment_index","media","add","then","delete","size","Promise","race","all"],"mappings":"AAAA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,KAAmCC,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AAC5F,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBJ,EAAAA,MAAM,CAACO,cAAP,CAAsBL,CAAtB,EAAyBG,EAAzB,EAA6B;AAAEG,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,GAAG,EAAE,YAAW;AAAE,aAAON,CAAC,CAACC,CAAD,CAAR;AAAc;AAApD,GAA7B;AACH,CAHwD,GAGnD,UAASF,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AACxB,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBF,EAAAA,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CANqB,CAAtB;;AAOA,IAAIM,kBAAkB,GAAI,QAAQ,KAAKA,kBAAd,KAAsCV,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYS,CAAZ,EAAe;AAC3FX,EAAAA,MAAM,CAACO,cAAP,CAAsBL,CAAtB,EAAyB,SAAzB,EAAoC;AAAEM,IAAAA,UAAU,EAAE,IAAd;AAAoBI,IAAAA,KAAK,EAAED;AAA3B,GAApC;AACH,CAF8D,GAE1D,UAAST,CAAT,EAAYS,CAAZ,EAAe;AAChBT,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeS,CAAf;AACH,CAJwB,CAAzB;;AAKA,IAAIE,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;AAC7D,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B,OAAOD,GAAP;AAC3B,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIF,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIV,CAAT,IAAcU,GAAd,EAAmB,IAAIV,CAAC,KAAK,SAAN,IAAmBJ,MAAM,CAACiB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CV,CAA1C,CAAvB,EAAqEL,eAAe,CAACiB,MAAD,EAASF,GAAT,EAAcV,CAAd,CAAf;;AACzGM,EAAAA,kBAAkB,CAACM,MAAD,EAASF,GAAT,CAAlB;;AACA,SAAOE,MAAP;AACH,CAND;;AAOA,IAAII,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUN,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAd,MAAM,CAACO,cAAP,CAAsBc,OAAtB,EAA+B,YAA/B,EAA6C;AAAET,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMU,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,gBAAgB,GAAGJ,eAAe,CAACG,OAAO,CAAC,kBAAD,CAAR,CAAxC;;AACA,MAAME,EAAE,GAAGZ,YAAY,CAACU,OAAO,CAAC,IAAD,CAAR,CAAvB;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMK,eAAe,GAAG,mBAAxB;AACA;AACA;AACA;;AACA,MAAMC,qBAAN,SAAoCL,gBAAgB,CAACM,OAArD,CAA6D;AACzDC,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,OAAL,GAAeX,SAAS,CAACY,eAAzB;AACH;AACD;AACJ;AACA;;;AACgB,MAARC,QAAQ,GAAG;AACX,WAAO,IAAP;AACH;AACD;;AACA;AACJ;AACA;AACA;;;AACIC,EAAAA,KAAK,CAACC,MAAD,EAASC,OAAO,GAAG,EAAnB,EAAuB;AACxB,UAAMC,WAAW,GAAG;AAChBF,MAAAA,MADgB;AAEhBG,MAAAA,UAAU,EAAE,UAFI;AAGhB,SAAGF;AAHa,KAApB;AAKA,WAAO,KAAKG,IAAL,CAAU,sBAAV,EAAkCF,WAAlC,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACUG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAA;;AAAA;AACtB,YAAMC,YAAY,GAAG,EAArB;;AACA,WAAK,MAAMR,KAAX,IAAoBO,MAApB,EAA4B;AACxB;AACA,cAAME,SAAS,GAAGD,YAAY,CAACE,MAAb,GAAsBF,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAAlC,GAA8D,IAAhF,CAFwB,CAGxB;;AACA,cAAMP,WAAW,GAAG,EAAE,IAAI,OAAOH,KAAP,KAAiB,QAAjB,GAA6B;AAAEC,YAAAA,MAAM,EAAED;AAAV,WAA7B,GAAkDA,KAAtD;AAAF,SAApB,CAJwB,CAKxB;;AACA,cAAMW,WAAW,GAAGF,SAAS,GAAGA,SAAS,CAACG,MAAb,GAAsBT,WAAW,CAACU,qBAA/D;AACA,cAAMZ,MAAM,GAAGE,WAAW,CAACF,MAA3B;;AACA,YAAIU,WAAJ,EAAiB;AACbH,UAAAA,YAAY,CAACM,IAAb,OAAwB,KAAI,CAACC,KAAL,CAAWd,MAAX,EAAmBU,WAAnB,EAAgCR,WAAhC,CAAxB;AACH,SAFD,MAGK;AACDK,UAAAA,YAAY,CAACM,IAAb,OAAwB,KAAI,CAACd,KAAL,CAAWC,MAAX,EAAmBE,WAAnB,CAAxB;AACH;AACJ;;AACD,aAAOK,YAAP;AAjBsB;AAkBzB;AACD;AACJ;AACA;AACA;;;AACIO,EAAAA,KAAK,CAACd,MAAD,EAASY,qBAAT,EAAgCX,OAAO,GAAG,EAA1C,EAA8C;AAC/C,WAAO,KAAKF,KAAL,CAAWC,MAAX,EAAmB;AACtBe,MAAAA,4BAA4B,EAAE,IADR;AAEtBH,MAAAA,qBAFsB;AAGtB,SAAGX;AAHmB,KAAnB,CAAP;AAKH;AACD;AACJ;AACA;AACA;;;AACIe,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,WAAO,KAAKb,IAAL,CAAU,2BAAV,EAAuC;AAAED,MAAAA,UAAU,EAAE;AAAd,KAAvC,EAAmE;AAAEe,MAAAA,MAAM,EAAE;AAAEC,QAAAA,EAAE,EAAEF;AAAN;AAAV,KAAnE,CAAP;AACH;AACD;;AACA;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,gBAAgB,CAACC,OAAD,EAAU;AACtB,WAAO,KAAKjB,IAAL,CAAU,wBAAV,EAAoC;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAApC,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,gBAAgB,CAACD,OAAD,EAAU;AACtB,WAAO,KAAKjB,IAAL,CAAU,yBAAV,EAAqCiB,OAArC,CAAP;AACH;AACD;;AACA;AACJ;AACA;AACA;;;AACIE,EAAAA,qBAAqB,CAACF,OAAD,EAAU;AAC3B,WAAO,KAAKjB,IAAL,CAAU,uBAAV,EAAmCiB,OAAnC,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIG,EAAAA,oBAAoB,CAACH,OAAD,EAAU;AAC1B,WAAO,KAAKjB,IAAL,CAAU,6BAAV,EAAyCiB,OAAzC,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACUI,EAAAA,0BAA0B,CAACC,IAAD,EAAOL,OAAO,GAAG,EAAjB,EAAqB;AAAA;;AAAA;AACjD,YAAMnB,WAAW,GAAG;AAChByB,QAAAA,MAAM,QAAQtC,kBAAkB,CAACuC,kBAAnB,CAAsCF,IAAtC,CADE;AAEhB,WAAGL;AAFa,OAApB;AAIA,aAAO,MAAI,CAACjB,IAAL,CAAU,oCAAV,EAAgDF,WAAhD,EAA6D;AAAE2B,QAAAA,aAAa,EAAE;AAAjB,OAA7D,CAAP;AALiD;AAMpD;AACD;AACJ;AACA;AACA;;;AACUC,EAAAA,yBAAyB,CAACJ,IAAD,EAAOL,OAAO,GAAG,EAAjB,EAAqB;AAAA;;AAAA;AAChD,YAAMnB,WAAW,GAAG;AAChBC,QAAAA,UAAU,EAAE,UADI;AAEhB4B,QAAAA,KAAK,QAAQ1C,kBAAkB,CAACuC,kBAAnB,CAAsCF,IAAtC,CAFG;AAGhB,WAAGL;AAHa,OAApB;AAKA,aAAO,MAAI,CAACjB,IAAL,CAAU,mCAAV,EAA+CF,WAA/C,EAA4D;AAAE2B,QAAAA,aAAa,EAAE;AAAjB,OAA5D,CAAP;AANgD;AAOnD;AACD;AACJ;AACA;AACA;;;AACIG,EAAAA,0BAA0B,GAAG;AACzB,WAAO,KAAK5B,IAAL,CAAU,oCAAV,CAAP;AACH;AACD;;AACA;AACJ;AACA;AACA;;;AACI6B,EAAAA,UAAU,CAACZ,OAAD,EAAU;AAChB,WAAO,KAAKjB,IAAL,CAAU,mBAAV,EAA+B;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIa,EAAAA,UAAU,CAACb,OAAD,EAAU;AAChB,WAAO,KAAKjB,IAAL,CAAU,mBAAV,EAA+B;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIc,EAAAA,UAAU,CAACd,OAAD,EAAU;AAChB,WAAO,KAAKjB,IAAL,CAAU,oBAAV,EAAgC;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,cAAc,CAACf,OAAD,EAAU;AACpB,UAAMgB,WAAW,GAAIhB,OAAO,CAACiB,OAAR,IAAmBhD,SAAS,CAACiD,gBAAV,CAA2BlB,OAAO,CAACiB,OAAnC,CAApB,IAAqEjB,OAAO,CAACmB,WAAR,IAAuBlD,SAAS,CAACiD,gBAAV,CAA2BlB,OAAO,CAACmB,WAAnC,CAAhH;AACA,UAAMC,QAAQ,GAAGJ,WAAW,GAAG,+BAAH,GAAqC,2BAAjE;AACA,WAAO,KAAKjC,IAAL,CAAUqC,QAAV,EAAoBpB,OAApB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIqB,EAAAA,iBAAiB,CAACrB,OAAD,EAAU;AACvB,UAAMgB,WAAW,GAAIhB,OAAO,CAACiB,OAAR,IAAmBhD,SAAS,CAACiD,gBAAV,CAA2BlB,OAAO,CAACiB,OAAnC,CAApB,IAAqEjB,OAAO,CAACmB,WAAR,IAAuBlD,SAAS,CAACiD,gBAAV,CAA2BlB,OAAO,CAACmB,WAAnC,CAAhH;AACA,UAAMC,QAAQ,GAAGJ,WAAW,GAAG,gCAAH,GAAsC,4BAAlE;AACA,WAAO,KAAKjC,IAAL,CAAUqC,QAAV,EAAoBpB,OAApB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIsB,EAAAA,eAAe,CAACtB,OAAD,EAAU;AACrB,WAAO,KAAKjB,IAAL,CAAU,+BAAV,EAA2C;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAA3C,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIuB,EAAAA,iBAAiB,CAACvB,OAAD,EAAU;AACvB,WAAO,KAAKjB,IAAL,CAAU,gCAAV,EAA4C;AAAED,MAAAA,UAAU,EAAE,UAAd;AAA0B,SAAGkB;AAA7B,KAA5C,CAAP;AACH;AACD;;AACA;AACJ;AACA;AACA;AACA;;;AACIwB,EAAAA,mBAAmB,CAACC,OAAD,EAAUC,QAAV,EAAoB;AACnC,WAAO,KAAK3C,IAAL,CAAU,4BAAV,EAAwC;AAAE4C,MAAAA,QAAQ,EAAEF,OAAZ;AAAqB,SAAGC;AAAxB,KAAxC,EAA4E;AAAEE,MAAAA,MAAM,EAAEhE,SAAS,CAACiE,sBAApB;AAA4CrB,MAAAA,aAAa,EAAE;AAA3D,KAA5E,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIsB,EAAAA,oBAAoB,CAACL,OAAD,EAAUM,SAAV,EAAqB;AACrC,WAAO,KAAKhD,IAAL,CAAU,6BAAV,EAAyC;AAAE4C,MAAAA,QAAQ,EAAEF,OAAZ;AAAqBO,MAAAA,cAAc,EAAE,YAArC;AAAmDC,MAAAA,aAAa,EAAE;AAAEF,QAAAA;AAAF;AAAlE,KAAzC,EAA4H;AAAEH,MAAAA,MAAM,EAAEhE,SAAS,CAACiE,sBAApB;AAA4CrB,MAAAA,aAAa,EAAE;AAA3D,KAA5H,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI0B,EAAAA,oBAAoB,CAACT,OAAD,EAAU,GAAGU,SAAb,EAAwB;AACxC,WAAO,KAAKpD,IAAL,CAAU,6BAAV,EAAyC;AAC5C4C,MAAAA,QAAQ,EAAEF,OADkC;AAE5CO,MAAAA,cAAc,EAAE,YAF4B;AAG5CC,MAAAA,aAAa,EAAE;AAAEF,QAAAA,SAAS,EAAEI,SAAS,CAACC,GAAV,CAAcC,IAAI,KAAK;AAAEC,UAAAA,aAAa,EAAED;AAAjB,SAAL,CAAlB;AAAb;AAH6B,KAAzC,EAIJ;AAAET,MAAAA,MAAM,EAAEhE,SAAS,CAACiE,sBAApB;AAA4CrB,MAAAA,aAAa,EAAE;AAA3D,KAJI,CAAP;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU+B,EAAAA,WAAW,CAAClC,IAAD,EAAOL,OAAO,GAAG,EAAjB,EAAqB;AAAA;;AAAA;AAClC,UAAIwC,EAAJ;;AACA,YAAMC,WAAW,GAAG,CAACD,EAAE,GAAGxC,OAAO,CAACyC,WAAd,MAA+B,IAA/B,IAAuCD,EAAE,KAAK,KAAK,CAAnD,GAAuDA,EAAvD,GAA6D,OAAO,IAAxF;AACA,YAAM;AAAEE,QAAAA,UAAF;AAAcC,QAAAA,aAAd;AAA6BC,QAAAA,QAA7B;AAAuCC,QAAAA;AAAvC,gBAA0D,MAAI,CAACC,0BAAL,CAAgCzC,IAAhC,EAAsCL,OAAtC,CAAhE,CAHkC,CAIlC;;AACA,UAAI;AACA;AACA,cAAM+C,SAAS,SAAS,MAAI,CAAChE,IAAL,CAAUb,eAAV,EAA2B;AAC/C8E,UAAAA,OAAO,EAAE,MADsC;AAE/CC,UAAAA,WAAW,EAAEL,QAFkC;AAG/CM,UAAAA,UAAU,EAAEL,QAHmC;AAI/Cb,UAAAA,cAAc,EAAEW,aAJ+B;AAK/CQ,UAAAA,iBAAiB,EAAEnD,OAAO,CAACoD,gBALoB;AAM/CC,UAAAA,MAAM,EAAErD,OAAO,CAACqD,MAAR,GAAiB,IAAjB,GAAwBzG;AANe,SAA3B,EAOrB;AAAEgF,UAAAA,MAAM,EAAEhE,SAAS,CAACiE;AAApB,SAPqB,CAAxB,CAFA,CAUA;;AACA,cAAM,MAAI,CAACyB,kBAAL,CAAwBZ,UAAxB,EAAoCD,WAApC,EAAiDM,SAAS,CAACQ,eAA3D,EAA4EvD,OAAO,CAACwD,oBAApF,CAAN,CAXA,CAYA;;AACA,cAAMC,aAAa,SAAS,MAAI,CAAC1E,IAAL,CAAUb,eAAV,EAA2B;AACnD8E,UAAAA,OAAO,EAAE,UAD0C;AAEnDrB,UAAAA,QAAQ,EAAEoB,SAAS,CAACQ;AAF+B,SAA3B,EAGzB;AAAE3B,UAAAA,MAAM,EAAEhE,SAAS,CAACiE;AAApB,SAHyB,CAA5B;;AAIA,YAAI4B,aAAa,CAACC,eAAd,IAAiCD,aAAa,CAACC,eAAd,CAA8BC,KAA9B,KAAwC,WAA7E,EAA0F;AACtF;AACA,gBAAM,MAAI,CAACC,iCAAL,CAAuCH,aAAvC,CAAN;AACH,SApBD,CAqBA;;;AACA,eAAOA,aAAa,CAACF,eAArB;AACH,OAvBD,SAwBQ;AACJ;AACA,YAAI,OAAOlD,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACAtC,UAAAA,EAAE,CAAC8F,KAAH,CAASxD,IAAT,EAAe,MAAM,CAAG,CAAxB;AACH,SAHD,MAIK,IAAI,OAAOqC,UAAP,KAAsB,QAAtB,IAAkC,EAAEA,UAAU,YAAYoB,MAAxB,CAAtC,EAAuE;AACxEpB,UAAAA,UAAU,CAACmB,KAAX;AACH;AACJ;AAtCiC;AAuCrC;;AACKD,EAAAA,iCAAiC,CAACH,aAAD,EAAgB;AAAA;;AAAA;AACnD;AACA,aAAO,IAAP,EAAa;AACTA,QAAAA,aAAa,SAAS,MAAI,CAACM,SAAL,CAAeN,aAAa,CAACF,eAA7B,CAAtB;;AACA,YAAI,CAACE,aAAa,CAACC,eAAf,IAAkCD,aAAa,CAACC,eAAd,CAA8BC,KAA9B,KAAwC,WAA9E,EAA2F;AACvF;AACA;AACH;;AACD,YAAIF,aAAa,CAACC,eAAd,CAA8BC,KAA9B,KAAwC,QAA5C,EAAsD;AAClD,gBAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,YAAIP,aAAa,CAACC,eAAd,CAA8BO,gBAAlC,EAAoD;AAChD;AACA,gBAAMjG,kBAAkB,CAACkG,SAAnB,CAA6BT,aAAa,CAACC,eAAd,CAA8BO,gBAA3D,CAAN;AACH,SAHD,MAIK;AACD;AACA,gBAAMjG,kBAAkB,CAACkG,SAAnB,CAA6B,CAA7B,CAAN;AACH;AACJ;AAnBkD;AAoBtD;;AACKpB,EAAAA,0BAA0B,CAACzC,IAAD,EAAO;AAAE8D,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,EAA1B,EAA8B;AAAA;AAC1D;AACA,UAAI1B,UAAJ;;AACA,UAAI;AACAA,QAAAA,UAAU,SAAS1E,kBAAkB,CAACqG,aAAnB,CAAiChE,IAAjC,CAAnB,CADA,CAEA;;AACA,cAAMwC,QAAQ,GAAG7E,kBAAkB,CAACsG,WAAnB,CAA+BjE,IAA/B,EAAqC8D,IAArC,CAAjB,CAHA,CAIA;;AACA,YAAIxB,aAAJ,CALA,CAMA;;AACA,YAAIwB,IAAI,KAAK,SAAT,IAAuBA,IAAI,KAAK,WAAT,IAAwBC,MAAM,KAAK,IAA9D,EAAqE;AACjEzB,UAAAA,aAAa,GAAG,eAAhB;AACH,SAFD,MAGK;AACDA,UAAAA,aAAa,GAAG3E,kBAAkB,CAACuG,sBAAnB,CAA0C1B,QAA1C,EAAoDuB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,OAApG,CAAhB;AACH;;AACD,eAAO;AACH1B,UAAAA,UADG;AAEHC,UAAAA,aAFG;AAGHC,UAAAA,QAAQ,QAAQ5E,kBAAkB,CAACwG,yBAAnB,CAA6C9B,UAA7C,CAHb;AAIHG,UAAAA;AAJG,SAAP;AAMH,OAnBD,CAoBA,OAAO4B,CAAP,EAAU;AACN;AACA,YAAI,OAAOpE,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACAtC,UAAAA,EAAE,CAAC8F,KAAH,CAASxD,IAAT,EAAe,MAAM,CAAG,CAAxB;AACH,SAHD,MAIK,IAAI,OAAOqC,UAAP,KAAsB,QAAtB,IAAkC,EAAEA,UAAU,YAAYoB,MAAxB,CAAtC,EAAuE;AACxEpB,UAAAA,UAAU,CAACmB,KAAX;AACH;;AACD,cAAMY,CAAN;AACH;AAjCyD;AAkC7D;;AACKnB,EAAAA,kBAAkB,CAACZ,UAAD,EAAaD,WAAb,EAA0BhB,OAA1B,EAAmC+B,oBAAoB,GAAG,CAA1D,EAA6D;AAAA;;AAAA;AACjF;AACA,UAAIkB,UAAU,GAAG,CAAjB;;AACA,UAAIlB,oBAAoB,GAAG,CAA3B,EAA8B;AAC1B,cAAM,IAAImB,UAAJ,CAAe,qCAAf,CAAN;AACH,OALgF,CAMjF;;;AACA,YAAMC,MAAM,GAAGlC,UAAU,YAAYoB,MAAtB,GAA+BlH,SAA/B,GAA2CkH,MAAM,CAACe,KAAP,CAAapC,WAAb,CAA1D,CAPiF,CAQjF;;AACA,UAAIqC,UAAJ,CATiF,CAUjF;;AACA,UAAIC,KAAJ,CAXiF,CAYjF;;AACA,UAAIC,MAAM,GAAG,CAAb;AACA,OAACF,UAAD,EAAaC,KAAb,UAA4B/G,kBAAkB,CAACiH,cAAnB,CAAkCvC,UAAlC,EAA8CD,WAA9C,EAA2DuC,MAA3D,EAAmEJ,MAAnE,CAA5B;AACAI,MAAAA,MAAM,IAAID,KAAV,CAfiF,CAgBjF;;AACA,YAAMG,cAAc,GAAG,IAAIC,GAAJ,EAAvB,CAjBiF,CAkBjF;;AACA,aAAOJ,KAAP,EAAc;AACV,cAAMK,eAAe,GAAGN,UAAU,CAACO,KAAX,CAAiB,CAAjB,EAAoBN,KAApB,CAAxB,CADU,CAEV;;AACA,YAAIK,eAAe,CAAChG,MAApB,EAA4B;AACxB,gBAAMkG,OAAO,GAAG,MAAI,CAACvG,IAAL,CAAUb,eAAV,EAA2B;AACvC8E,YAAAA,OAAO,EAAE,QAD8B;AAEvCrB,YAAAA,QAAQ,EAAEF,OAF6B;AAGvC8D,YAAAA,aAAa,EAAEb,UAHwB;AAIvCc,YAAAA,KAAK,EAAEJ;AAJgC,WAA3B,EAKb;AAAExD,YAAAA,MAAM,EAAEhE,SAAS,CAACiE;AAApB,WALa,CAAhB;;AAMAqD,UAAAA,cAAc,CAACO,GAAf,CAAmBH,OAAnB;AACAA,UAAAA,OAAO,CAACI,IAAR,CAAa,MAAM;AACfR,YAAAA,cAAc,CAACS,MAAf,CAAsBL,OAAtB;AACH,WAFD;AAGAZ,UAAAA,UAAU;AACb;;AACD,YAAIQ,cAAc,CAACU,IAAf,IAAuBpC,oBAA3B,EAAiD;AAC7C;AACA,gBAAMqC,OAAO,CAACC,IAAR,CAAaZ,cAAb,CAAN;AACH;;AACD,SAACJ,UAAD,EAAaC,KAAb,UAA4B/G,kBAAkB,CAACiH,cAAnB,CAAkCvC,UAAlC,EAA8CD,WAA9C,EAA2DuC,MAA3D,EAAmEJ,MAAnE,CAA5B;AACAI,QAAAA,MAAM,IAAID,KAAV;AACH;;AACD,YAAMc,OAAO,CAACE,GAAR,CAAY,CAAC,GAAGb,cAAJ,CAAZ,CAAN;AA1CiF;AA2CpF;;AAtXwD;;AAwX7DvH,OAAO,CAACS,OAAR,GAAkBD,qBAAlB","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nconst fs = __importStar(require(\"fs\"));\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\nconst helpers_1 = require(\"../helpers\");\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /* Tweet API */\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    tweet(status, payload = {}) {\n        const queryParams = {\n            status,\n            tweet_mode: 'extended',\n            ...payload,\n        };\n        return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async tweetThread(tweets) {\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ status: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n            const status = queryParams.status;\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    reply(status, in_reply_to_status_id, payload = {}) {\n        return this.tweet(status, {\n            auto_populate_reply_metadata: true,\n            in_reply_to_status_id,\n            ...payload,\n        });\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n    deleteTweet(tweetId) {\n        return this.post('statuses/destroy/:id.json', { tweet_mode: 'extended' }, { params: { id: tweetId } });\n    }\n    /* User API */\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n    reportUserAsSpam(options) {\n        return this.post('users/report_spam.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n    updateFriendship(options) {\n        return this.post('friendships/update.json', options);\n    }\n    /* Account API */\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    updateAccountSettings(options) {\n        return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n    updateAccountProfile(options) {\n        return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n    async updateAccountProfileBanner(file, options = {}) {\n        const queryParams = {\n            banner: await media_helpers_v1_1.readFileIntoBuffer(file),\n            ...options,\n        };\n        return this.post('account/update_profile_banner.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n    async updateAccountProfileImage(file, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            image: await media_helpers_v1_1.readFileIntoBuffer(file),\n            ...options,\n        };\n        return this.post('account/update_profile_image.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n    removeAccountProfileBanner() {\n        return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n    createList(options) {\n        return this.post('lists/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n    updateList(options) {\n        return this.post('lists/update.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n    removeList(options) {\n        return this.post('lists/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n    addListMembers(options) {\n        const hasMultiple = (options.user_id && helpers_1.hasMultipleItems(options.user_id)) || (options.screen_name && helpers_1.hasMultipleItems(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n    removeListMembers(options) {\n        const hasMultiple = (options.user_id && helpers_1.hasMultipleItems(options.user_id)) || (options.screen_name && helpers_1.hasMultipleItems(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n    subscribeToList(options) {\n        return this.post('lists/subscribers/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n    unsubscribeOfList(options) {\n        return this.post('lists/subscribers/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /* Media upload API */\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n    createMediaMetadata(mediaId, metadata) {\n        return this.post('media/metadata/create.json', { media_id: mediaId, ...metadata }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n    createMediaSubtitles(mediaId, subtitles) {\n        return this.post('media/subtitles/create.json', { media_id: mediaId, media_category: 'TweetVideo', subtitle_info: { subtitles } }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n    deleteMediaSubtitles(mediaId, ...languages) {\n        return this.post('media/subtitles/delete.json', {\n            media_id: mediaId,\n            media_category: 'TweetVideo',\n            subtitle_info: { subtitles: languages.map(lang => ({ language_code: lang })) },\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n    async uploadMedia(file, options = {}) {\n        var _a;\n        const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : (1024 * 1024);\n        const { fileHandle, mediaCategory, fileSize, mimeType } = await this.getUploadMediaRequirements(file, options);\n        // Get the file handle (if not buffer)\n        try {\n            // Finally! We can send INIT message.\n            const mediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'INIT',\n                total_bytes: fileSize,\n                media_type: mimeType,\n                media_category: mediaCategory,\n                additional_owners: options.additionalOwners,\n                shared: options.shared ? true : undefined,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            // Upload the media chunk by chunk\n            await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n            // Finalize media\n            const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'FINALIZE',\n                media_id: mediaData.media_id_string,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n                // Must wait if video is still computed\n                await this.awaitForMediaProcessingCompletion(fullMediaData);\n            }\n            // Video is ready, return media_id\n            return fullMediaData.media_id_string;\n        }\n        finally {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n        }\n    }\n    async awaitForMediaProcessingCompletion(fullMediaData) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n            if (!fullMediaData.processing_info || fullMediaData.processing_info.state === 'succeeded') {\n                // Ok, completed!\n                return;\n            }\n            if (fullMediaData.processing_info.state === 'failed') {\n                throw new Error('Failed to process the media.');\n            }\n            if (fullMediaData.processing_info.check_after_secs) {\n                // Await for given seconds\n                await media_helpers_v1_1.sleepSecs(fullMediaData.processing_info.check_after_secs);\n            }\n            else {\n                // No info; Await for 5 seconds\n                await media_helpers_v1_1.sleepSecs(5);\n            }\n        }\n    }\n    async getUploadMediaRequirements(file, { type, target } = {}) {\n        // Get the file handle (if not buffer)\n        let fileHandle;\n        try {\n            fileHandle = await media_helpers_v1_1.getFileHandle(file);\n            // Get the mimetype\n            const mimeType = media_helpers_v1_1.getMimeType(file, type);\n            // Get the media category\n            let mediaCategory;\n            // If explicit longmp4 OR explicit MIME type and not DM target\n            if (type === 'longmp4' || (type === 'video/mp4' && target !== 'dm')) {\n                mediaCategory = 'amplify_video';\n            }\n            else {\n                mediaCategory = media_helpers_v1_1.getMediaCategoryByMime(mimeType, target !== null && target !== void 0 ? target : 'tweet');\n            }\n            return {\n                fileHandle,\n                mediaCategory,\n                fileSize: await media_helpers_v1_1.getFileSizeFromFileHandle(fileHandle),\n                mimeType,\n            };\n        }\n        catch (e) {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n            throw e;\n        }\n    }\n    async mediaChunkedUpload(fileHandle, chunkLength, mediaId, maxConcurrentUploads = 3) {\n        // Send chunk by chunk\n        let chunkIndex = 0;\n        if (maxConcurrentUploads < 1) {\n            throw new RangeError('Bad maxConcurrentUploads parameter.');\n        }\n        // Creating a buffer for doing file stuff (if we don't have one)\n        const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength);\n        // Sliced/filled buffer returned for each part\n        let readBuffer;\n        // Needed to know when we should stop reading the file\n        let nread;\n        // Needed to use the buffer object (file handles always \"remembers\" file position)\n        let offset = 0;\n        [readBuffer, nread] = await media_helpers_v1_1.readNextPartOf(fileHandle, chunkLength, offset, buffer);\n        offset += nread;\n        // Handle max concurrent uploads\n        const currentUploads = new Set();\n        // Read buffer until file is completely read\n        while (nread) {\n            const mediaBufferPart = readBuffer.slice(0, nread);\n            // Sent part if part has something inside\n            if (mediaBufferPart.length) {\n                const request = this.post(UPLOAD_ENDPOINT, {\n                    command: 'APPEND',\n                    media_id: mediaId,\n                    segment_index: chunkIndex,\n                    media: mediaBufferPart,\n                }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n                currentUploads.add(request);\n                request.then(() => {\n                    currentUploads.delete(request);\n                });\n                chunkIndex++;\n            }\n            if (currentUploads.size >= maxConcurrentUploads) {\n                // Await for first promise to be finished\n                await Promise.race(currentUploads);\n            }\n            [readBuffer, nread] = await media_helpers_v1_1.readNextPartOf(fileHandle, chunkLength, offset, buffer);\n            offset += nread;\n        }\n        await Promise.all([...currentUploads]);\n    }\n}\nexports.default = TwitterApiv1ReadWrite;\n"]},"metadata":{},"sourceType":"script"}