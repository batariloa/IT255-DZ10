{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nconst globals_1 = require(\"../globals\");\n\nconst paginators_1 = require(\"../paginators\");\n\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\n\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\n\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\n\n\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_read_1.default(this);\n  }\n  /* Tweets */\n\n  /**\n   * The recent search endpoint returns Tweets from the last seven days that match a search query.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent\n   */\n\n\n  search(query, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = { ...options,\n        query\n      };\n      const initialRq = yield _this.get('tweets/search/recent', queryParams, {\n        fullResponse: true\n      });\n      return new paginators_1.TweetSearchRecentV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this,\n        queryParams\n      });\n    })();\n  }\n  /**\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   *\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n   */\n\n\n  searchAll(query, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const queryParams = { ...options,\n        query\n      };\n      const initialRq = yield _this2.get('tweets/search/all', queryParams, {\n        fullResponse: true\n      });\n      return new paginators_1.TweetSearchAllV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this2,\n        queryParams\n      });\n    })();\n  }\n  /**\n   * Returns a variety of information about a single Tweet specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  singleTweet(tweetId, options = {}) {\n    return this.get('tweets/:id', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about tweets specified by list of IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  tweets(tweetIds, options = {}) {\n    return this.get('tweets', {\n      ids: tweetIds,\n      ...options\n    });\n  }\n  /**\n   * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n   * OAuth2 Bearer auth only.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n   */\n\n\n  tweetCountRecent(query, options = {}) {\n    return this.get('tweets/counts/recent', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   * OAuth2 Bearer auth only.\n   * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n   */\n\n\n  tweetCountAll(query, options = {}) {\n    return this.get('tweets/counts/all', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Allows you to get information about who has Retweeted a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by\n   */\n\n\n  tweetRetweetedBy(tweetId, options = {}) {\n    return this.get('tweets/:id/retweeted_by', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Allows you to get information about who has Liked a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users\n   */\n\n\n  tweetLikedBy(tweetId, options = {}) {\n    return this.get('tweets/:id/liking_users', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns Tweets composed by a single user, specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, the most recent 3,200 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n   */\n\n\n  userTimeline(userId, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const initialRq = yield _this3.get('users/:id/tweets', options, {\n        fullResponse: true,\n        params: {\n          id: userId\n        }\n      });\n      return new paginators_1.TweetUserTimelineV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this3,\n        queryParams: options,\n        sharedParams: {\n          id: userId\n        }\n      });\n    })();\n  }\n  /**\n   * Returns Tweets mentioning a single user specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, up to the most recent 800 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n   */\n\n\n  userMentionTimeline(userId, options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const initialRq = yield _this4.get('users/:id/mentions', options, {\n        fullResponse: true,\n        params: {\n          id: userId\n        }\n      });\n      return new paginators_1.TweetUserMentionTimelineV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this4,\n        queryParams: options,\n        sharedParams: {\n          id: userId\n        }\n      });\n    })();\n  }\n  /* Users */\n\n  /**\n   * Returns a variety of information about a single user specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n   */\n\n\n  user(userId, options = {}) {\n    return this.get('users/:id', options, {\n      params: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by the requested IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n   */\n\n\n  users(userIds, options = {}) {\n    const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n    return this.get('users', { ...options,\n      ids\n    });\n  }\n  /**\n   * Returns a variety of information about a single user specified by their username.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n   */\n\n\n  userByUsername(username, options = {}) {\n    return this.get('users/by/username/:username', options, {\n      params: {\n        username\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by their usernames.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  usersByUsernames(usernames, options = {}) {\n    usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n    return this.get('users/by', { ...options,\n      usernames\n    });\n  }\n\n  followers(userId, options = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        asPaginator,\n        ...parameters\n      } = options;\n      const params = {\n        id: userId\n      };\n\n      if (!asPaginator) {\n        return _this5.get('users/:id/followers', parameters, {\n          params\n        });\n      }\n\n      const initialRq = yield _this5.get('users/:id/followers', parameters, {\n        fullResponse: true,\n        params\n      });\n      return new user_paginator_v2_1.UserFollowersV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this5,\n        queryParams: parameters,\n        sharedParams: params\n      });\n    })();\n  }\n\n  following(userId, options = {}) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        asPaginator,\n        ...parameters\n      } = options;\n      const params = {\n        id: userId\n      };\n\n      if (!asPaginator) {\n        return _this6.get('users/:id/following', parameters, {\n          params\n        });\n      }\n\n      const initialRq = yield _this6.get('users/:id/following', parameters, {\n        fullResponse: true,\n        params\n      });\n      return new user_paginator_v2_1.UserFollowingV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this6,\n        queryParams: parameters,\n        sharedParams: params\n      });\n    })();\n  }\n  /**\n   * Allows you to get information about a user’s liked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n   */\n\n\n  userLikedTweets(userId, options = {}) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = {\n        id: userId\n      };\n      const initialRq = yield _this7.get('users/:id/liked_tweets', options, {\n        fullResponse: true,\n        params\n      });\n      return new paginators_1.TweetV2UserLikedTweetsPaginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this7,\n        queryParams: { ...options\n        },\n        sharedParams: params\n      });\n    })();\n  }\n  /**\n   * Returns a list of users who are blocked by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n   */\n\n\n  userBlockingUsers(userId, options = {}) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = {\n        id: userId\n      };\n      const initialRq = yield _this8.get('users/:id/blocking', options, {\n        fullResponse: true,\n        params\n      });\n      return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this8,\n        queryParams: { ...options\n        },\n        sharedParams: params\n      });\n    })();\n  }\n  /**\n   * Returns a list of users who are muted by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n   */\n\n\n  userMutingUsers(userId, options = {}) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const params = {\n        id: userId\n      };\n      const initialRq = yield _this9.get('users/:id/muting', options, {\n        fullResponse: true,\n        params\n      });\n      return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n        realData: initialRq.data,\n        rateLimit: initialRq.rateLimit,\n        instance: _this9,\n        queryParams: { ...options\n        },\n        sharedParams: params\n      });\n    })();\n  }\n  /* Spaces */\n\n  /**\n   * Get a single space by ID.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  space(spaceId, options = {}) {\n    return this.get('spaces/:id', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n  /**\n   * Get spaces using their IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spaces(spaceIds, options = {}) {\n    return this.get('spaces', {\n      ids: spaceIds,\n      ...options\n    });\n  }\n  /**\n   * Get spaces using their creator user ID(s). (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spacesByCreators(creatorIds, options = {}) {\n    return this.get('spaces/by/creator_ids', {\n      user_ids: creatorIds,\n      ...options\n    });\n  }\n  /**\n   * Search through spaces using multiple params. (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n   */\n\n\n  searchSpaces(options) {\n    return this.get('spaces/search', options);\n  }\n\n  searchStream({\n    autoConnect,\n    ...options\n  } = {}) {\n    return this.getStream('tweets/search/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /**\n   * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n   */\n\n\n  streamRules(options = {}) {\n    return this.get('tweets/search/stream/rules', options);\n  }\n\n  updateStreamRules(options, query = {}) {\n    return this.post('tweets/search/stream/rules', options, {\n      query\n    });\n  }\n\n  sampleStream({\n    autoConnect,\n    ...options\n  } = {}) {\n    return this.getStream('tweets/sample/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /* Batch compliance */\n\n  /**\n   * Returns a list of recent compliance jobs.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n   */\n\n\n  complianceJobs(options) {\n    return this.get('compliance/jobs', options);\n  }\n  /**\n   * Get a single compliance job with the specified ID.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n   */\n\n\n  complianceJob(jobId) {\n    return this.get('compliance/jobs/:id', undefined, {\n      params: {\n        id: jobId\n      }\n    });\n  }\n  /**\n   * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n   * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n   *\n   * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  sendComplianceJob(jobParams) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const job = yield _this10.post('compliance/jobs', {\n        type: jobParams.type,\n        name: jobParams.name\n      }); // Send the IDs\n\n      const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n')); // Upload the IDs\n\n      yield _this10.put(job.data.upload_url, rawIdsBody, {\n        forceBodyMode: 'raw',\n        enableAuth: false,\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        prefix: ''\n      });\n      return job;\n    })();\n  }\n  /**\n   * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n   * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  complianceJobResult(job) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      let runningJob = job;\n\n      while (runningJob.status !== 'complete') {\n        if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n          throw new Error('Job failed to be completed.');\n        }\n\n        yield new Promise(resolve => setTimeout(resolve, 3500));\n        runningJob = (yield _this11.complianceJob(job.id)).data;\n      } // Download and parse result\n\n\n      const result = yield _this11.get(job.download_url, undefined, {\n        enableAuth: false,\n        prefix: ''\n      });\n      return result.trim().split('\\n').filter(line => line).map(line => JSON.parse(line));\n    })();\n  }\n\n}\n\nexports.default = TwitterApiv2ReadOnly;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/v2/client.v2.read.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","paginators_1","client_v2_labs_read_1","user_paginator_v2_1","helpers_1","TwitterApiv2ReadOnly","default","constructor","arguments","_prefix","API_V2_PREFIX","labs","_labs","search","query","options","queryParams","initialRq","get","fullResponse","TweetSearchRecentV2Paginator","realData","data","rateLimit","instance","searchAll","TweetSearchAllV2Paginator","singleTweet","tweetId","params","id","tweets","tweetIds","ids","tweetCountRecent","tweetCountAll","tweetRetweetedBy","tweetLikedBy","userTimeline","userId","TweetUserTimelineV2Paginator","sharedParams","userMentionTimeline","TweetUserMentionTimelineV2Paginator","user","users","userIds","Array","isArray","join","userByUsername","username","usersByUsernames","usernames","followers","asPaginator","parameters","UserFollowersV2Paginator","following","UserFollowingV2Paginator","userLikedTweets","TweetV2UserLikedTweetsPaginator","userBlockingUsers","UserBlockingUsersV2Paginator","userMutingUsers","UserMutingUsersV2Paginator","space","spaceId","spaces","spaceIds","spacesByCreators","creatorIds","user_ids","searchSpaces","searchStream","autoConnect","getStream","payloadIsError","isTweetStreamV2ErrorPayload","streamRules","updateStreamRules","post","sampleStream","complianceJobs","complianceJob","jobId","undefined","sendComplianceJob","jobParams","job","type","name","rawIdsBody","Buffer","from","put","upload_url","forceBodyMode","enableAuth","headers","prefix","complianceJobResult","runningJob","status","Error","Promise","resolve","setTimeout","result","download_url","trim","split","filter","line","map","JSON","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_read_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * The recent search endpoint returns Tweets from the last seven days that match a search query.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent\n     */\n    async search(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/recent', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchRecentV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n    async searchAll(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/all', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchAllV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('tweets/:id', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    tweets(tweetIds, options = {}) {\n        return this.get('tweets', { ids: tweetIds, ...options });\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n    tweetCountRecent(query, options = {}) {\n        return this.get('tweets/counts/recent', { query, ...options });\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n    tweetCountAll(query, options = {}) {\n        return this.get('tweets/counts/all', { query, ...options });\n    }\n    /**\n     * Allows you to get information about who has Retweeted a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/get-tweets-id-retweeted_by\n     */\n    tweetRetweetedBy(tweetId, options = {}) {\n        return this.get('tweets/:id/retweeted_by', options, { params: { id: tweetId } });\n    }\n    /**\n     * Allows you to get information about who has Liked a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-tweets-id-liking_users\n     */\n    tweetLikedBy(tweetId, options = {}) {\n        return this.get('tweets/:id/liking_users', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n    async userTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/tweets', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n    async userMentionTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/mentions', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserMentionTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /* Users */\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n    user(userId, options = {}) {\n        return this.get('users/:id', options, { params: { id: userId } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n    users(userIds, options = {}) {\n        const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n        return this.get('users', { ...options, ids });\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n    userByUsername(username, options = {}) {\n        return this.get('users/by/username/:username', options, { params: { username } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    usersByUsernames(usernames, options = {}) {\n        usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n        return this.get('users/by', { ...options, usernames });\n    }\n    async followers(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/followers', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/followers', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    async following(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/following', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/following', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowingV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    /**\n     * Allows you to get information about a user’s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n    async userLikedTweets(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/liked_tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2UserLikedTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n    async userBlockingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/blocking', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n    async userMutingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/muting', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    space(spaceId, options = {}) {\n        return this.get('spaces/:id', options, { params: { id: spaceId } });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spaces(spaceIds, options = {}) {\n        return this.get('spaces', { ids: spaceIds, ...options });\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spacesByCreators(creatorIds, options = {}) {\n        return this.get('spaces/by/creator_ids', { user_ids: creatorIds, ...options });\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n    searchSpaces(options) {\n        return this.get('spaces/search', options);\n    }\n    searchStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/search/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n    streamRules(options = {}) {\n        return this.get('tweets/search/stream/rules', options);\n    }\n    updateStreamRules(options, query = {}) {\n        return this.post('tweets/search/stream/rules', options, { query });\n    }\n    sampleStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/sample/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n    complianceJobs(options) {\n        return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n    complianceJob(jobId) {\n        return this.get('compliance/jobs/:id', undefined, { params: { id: jobId } });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async sendComplianceJob(jobParams) {\n        const job = await this.post('compliance/jobs', { type: jobParams.type, name: jobParams.name });\n        // Send the IDs\n        const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n        // Upload the IDs\n        await this.put(job.data.upload_url, rawIdsBody, {\n            forceBodyMode: 'raw',\n            enableAuth: false,\n            headers: { 'Content-Type': 'text/plain' },\n            prefix: '',\n        });\n        return job;\n    }\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async complianceJobResult(job) {\n        let runningJob = job;\n        while (runningJob.status !== 'complete') {\n            if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n                throw new Error('Job failed to be completed.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 3500));\n            runningJob = (await this.complianceJob(job.id)).data;\n        }\n        // Download and parse result\n        const result = await this.get(job.download_url, undefined, {\n            enableAuth: false,\n            prefix: '',\n        });\n        return result\n            .trim()\n            .split('\\n')\n            .filter(line => line)\n            .map(line => JSON.parse(line));\n    }\n}\nexports.default = TwitterApiv2ReadOnly;\n"]},"metadata":{},"sourceType":"script"}