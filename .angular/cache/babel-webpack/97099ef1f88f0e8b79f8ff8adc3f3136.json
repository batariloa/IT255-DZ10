{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst globals_1 = require(\"../globals\");\n\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\n\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\n\n\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  get readOnly() {\n    return this;\n  }\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_write_1.default(this);\n  }\n  /* Tweets */\n\n  /**\n   * Hides or unhides a reply to a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n   */\n\n\n  hideReply(tweetId, makeHidden) {\n    return this.put('tweets/:id/hidden', {\n      hidden: makeHidden\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Like the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  like(loggedUserId, targetTweetId) {\n    return this.post('users/:id/likes', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unlike a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unlike(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/likes/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  retweet(loggedUserId, targetTweetId) {\n    return this.post('users/:id/retweets', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unretweet(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/retweets/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n\n  tweet(status, payload = {}) {\n    if (typeof status === 'object') {\n      payload = status;\n    } else {\n      payload = {\n        text: status,\n        ...payload\n      };\n    }\n\n    return this.post('tweets', payload);\n  }\n  /**\n   * Reply to a Tweet on behalf of an authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n\n\n  reply(status, toTweetId, payload = {}) {\n    var _a;\n\n    const reply = {\n      in_reply_to_tweet_id: toTweetId,\n      ...((_a = payload.reply) !== null && _a !== void 0 ? _a : {})\n    };\n    return this.post('tweets', {\n      text: status,\n      ...payload,\n      reply\n    });\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n\n\n  tweetThread(tweets) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      const postedTweets = [];\n\n      for (const tweet of tweets) {\n        // Retrieve the last sent tweet\n        const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n        const queryParams = { ...(typeof tweet === 'string' ? {\n            text: tweet\n          } : tweet)\n        }; // Reply to an existing tweet if needed\n\n        const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n        const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n\n        if (inReplyToId) {\n          postedTweets.push(yield _this.reply(status, inReplyToId, queryParams));\n        } else {\n          postedTweets.push(yield _this.tweet(status, queryParams));\n        }\n      }\n\n      return postedTweets;\n    })();\n  }\n  /**\n   * Allows a user or authenticated user ID to delete a Tweet\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n   */\n\n\n  deleteTweet(tweetId) {\n    return this.delete('tweets/:id', undefined, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* Users */\n\n  /**\n   * Allows a user ID to follow another user.\n   * If the target user does not have public Tweets, this endpoint will send a follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n   *\n   * OAuth2 scope: `account.follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  follow(loggedUserId, targetUserId) {\n    return this.post('users/:id/following', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user ID to unfollow another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n   *\n   * OAuth2 scope: `account.follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unfollow(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Causes the user (in the path) to block the target user.\n   * The user (in the path) must match the user context authorizing the request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  block(loggedUserId, targetUserId) {\n    return this.post('users/:id/blocking', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unblock another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unblock(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to mute the target user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  mute(loggedUserId, targetUserId) {\n    return this.post('users/:id/muting', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to unmute the target user.\n   * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unmute(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /* Lists */\n\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n   */\n\n\n  createList(options) {\n    return this.post('lists', options);\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n   */\n\n\n  updateList(listId, options = {}) {\n    return this.put('lists/:id', options, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n   */\n\n\n  removeList(listId) {\n    return this.delete('lists/:id', undefined, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Adds a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n   */\n\n\n  addListMember(listId, userId) {\n    return this.post('lists/:id/members', {\n      user_id: userId\n    }, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Remember a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n   */\n\n\n  removeListMember(listId, userId) {\n    return this.delete('lists/:id/members/:user_id', undefined, {\n      params: {\n        id: listId,\n        user_id: userId\n      }\n    });\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n   */\n\n\n  subscribeToList(loggedUserId, listId) {\n    return this.post('users/:id/followed_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n   */\n\n\n  unsubscribeOfList(loggedUserId, listId) {\n    return this.delete('users/:id/followed_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to pin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n   */\n\n\n  pinList(loggedUserId, listId) {\n    return this.post('users/:id/pinned_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to unpin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n   */\n\n\n  unpinList(loggedUserId, listId) {\n    return this.delete('users/:id/pinned_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n\n}\n\nexports.default = TwitterApiv2ReadWrite;","map":{"version":3,"sources":["/home/dre/Documents/IT255-DZ10/IT255-DZ10/node_modules/twitter-api-v2/dist/v2/client.v2.write.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","globals_1","require","client_v2_read_1","client_v2_labs_write_1","TwitterApiv2ReadWrite","default","constructor","arguments","_prefix","API_V2_PREFIX","readOnly","labs","_labs","hideReply","tweetId","makeHidden","put","hidden","params","id","like","loggedUserId","targetTweetId","post","tweet_id","unlike","delete","undefined","retweet","unretweet","tweet","status","payload","text","reply","toTweetId","_a","in_reply_to_tweet_id","tweetThread","tweets","_b","postedTweets","lastTweet","length","queryParams","inReplyToId","data","push","deleteTweet","follow","targetUserId","target_user_id","unfollow","source_user_id","block","unblock","mute","unmute","createList","options","updateList","listId","removeList","addListMember","userId","user_id","removeListMember","subscribeToList","list_id","unsubscribeOfList","pinList","unpinList"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_write_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n    hideReply(tweetId, makeHidden) {\n        return this.put('tweets/:id/hidden', { hidden: makeHidden }, { params: { id: tweetId } });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    like(loggedUserId, targetTweetId) {\n        return this.post('users/:id/likes', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unlike(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/likes/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    retweet(loggedUserId, targetTweetId) {\n        return this.post('users/:id/retweets', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unretweet(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/retweets/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    tweet(status, payload = {}) {\n        if (typeof status === 'object') {\n            payload = status;\n        }\n        else {\n            payload = { text: status, ...payload };\n        }\n        return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    reply(status, toTweetId, payload = {}) {\n        var _a;\n        const reply = { in_reply_to_tweet_id: toTweetId, ...(_a = payload.reply) !== null && _a !== void 0 ? _a : {} };\n        return this.post('tweets', { text: status, ...payload, reply });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    async tweetThread(tweets) {\n        var _a, _b;\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ text: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n            const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n    deleteTweet(tweetId) {\n        return this.delete('tweets/:id', undefined, {\n            params: {\n                id: tweetId,\n            },\n        });\n    }\n    /* Users */\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `account.follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    follow(loggedUserId, targetUserId) {\n        return this.post('users/:id/following', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `account.follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unfollow(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    block(loggedUserId, targetUserId) {\n        return this.post('users/:id/blocking', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unblock(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    mute(loggedUserId, targetUserId) {\n        return this.post('users/:id/muting', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unmute(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n    createList(options) {\n        return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n    updateList(listId, options = {}) {\n        return this.put('lists/:id', options, { params: { id: listId } });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n    removeList(listId) {\n        return this.delete('lists/:id', undefined, { params: { id: listId } });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n    addListMember(listId, userId) {\n        return this.post('lists/:id/members', { user_id: userId }, { params: { id: listId } });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n    removeListMember(listId, userId) {\n        return this.delete('lists/:id/members/:user_id', undefined, { params: { id: listId, user_id: userId } });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n    subscribeToList(loggedUserId, listId) {\n        return this.post('users/:id/followed_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n    unsubscribeOfList(loggedUserId, listId) {\n        return this.delete('users/:id/followed_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n    pinList(loggedUserId, listId) {\n        return this.post('users/:id/pinned_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n    unpinList(loggedUserId, listId) {\n        return this.delete('users/:id/pinned_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n}\nexports.default = TwitterApiv2ReadWrite;\n"]},"metadata":{},"sourceType":"script"}